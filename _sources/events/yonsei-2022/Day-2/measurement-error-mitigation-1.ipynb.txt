{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e5d398a",
   "metadata": {},
   "source": [
    "# Mesurement error mitigation - I"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eae6efb9",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "    This notebook is requires installing the following:\n",
    "    <ul>\n",
    "        <li>M3: <tt>pip install mthree</tt></li>\n",
    "    </ul>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a9ffa3",
   "metadata": {},
   "source": [
    "## Overview\n",
    "\n",
    "On superconducting platforms such as IBM Quantum systems, measurements have one of the highest (it not the highest) error rate per operation of any instruction.  Although quantum circuits often contain many more gates than measurements, the output of a quantum computer relies on qubit measurement, making the correction of these operations an important task for achieving high-fidelity results.  Fortunately, techniques have been developed that make mitigating these errors, on average, computationally feasible.  However, as with all mitigation methods, the cost is an increase in the variance of the computed observables; requiring an increase in the number of circuit executions needed for recovering the initial variance.  Here we will see how to use the \"M3\" method to correct measurement errors in experiments requiring expectation values.  the correction of probability distributions is also addressed.\n",
    "\n",
    "- M3 Paper: [PRX Quantum 2, 040326 (2021)](https://doi.org/10.1103/PRXQuantum.2.040326)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fdf07a5",
   "metadata": {},
   "source": [
    "## Frontmatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9687305",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:02.818835Z",
     "start_time": "2022-11-14T15:58:00.991814Z"
    }
   },
   "outputs": [],
   "source": [
    "# Standard imports\n",
    "import numpy as np\n",
    "from qiskit import *\n",
    "\n",
    "# Load stuff needed for this notebook\n",
    "from qiskit.quantum_info import Statevector, hellinger_fidelity\n",
    "from qiskit.providers.fake_provider import FakeProvider\n",
    "from qiskit.result import sampled_expectation_value\n",
    "\n",
    "# Load the M3 measurement mitigation tools\n",
    "import mthree\n",
    "\n",
    "# Plotting stuff to look better\n",
    "import matplotlib.pyplot as plt\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "try:\n",
    "    plt.style.use('quantum-light')\n",
    "except: pass"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "340ec18b",
   "metadata": {},
   "source": [
    "Lets load our IBM account and grab a real system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f1f8ea1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AccountProvider for IBMQ(hub='ibm-q', group='open', project='main')>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IBMQ.load_account()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "552341ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "provider = IBMQ.get_provider(project='internal-test')\n",
    "real_backend = provider.get_backend('ibm_sherbrooke')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "938e1bc0",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "Although the power of quantum computation lies in the ability to create large amounts of entanglement and explore large swaths of Hilbert space, at the end of the day the result encoded in the terminal quantum state must be converted to classical information by measuring the qubits.  Note that there is also the possibility of mid-circuit measurements, but we will not address those here.\n",
    "\n",
    "When measureing a qubit, there are two error rates that quantify the noise:\n",
    "\n",
    "- $P_{10}$: Probability of qubit in the $0$ state but measuring $1$.\n",
    "\n",
    "- $P_{01}$: Probability of qubit in the $1$ state but measuring $0$.\n",
    "\n",
    "The probabilities of correctly measuring the qubit in the 0 and 1 states are thus $P_{00}=1-P_{10}$ and $P_{11}=1-P_{01}$, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed5405ef",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.210582Z",
     "start_time": "2022-11-14T15:58:02.821464Z"
    }
   },
   "outputs": [],
   "source": [
    "provider = FakeProvider()\n",
    "backend = provider.get_backend('fake_hanoi')\n",
    "props = backend.properties()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "75dfb622",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.217063Z",
     "start_time": "2022-11-14T15:58:03.213290Z"
    }
   },
   "outputs": [],
   "source": [
    "P01 = props.qubit_property(0, 'prob_meas0_prep1')[0]\n",
    "P10 = props.qubit_property(0, 'prob_meas1_prep0')[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9c0941",
   "metadata": {},
   "source": [
    "Assuming the measurement error for each qubit is uncorrelated with that of other qubits, we can define an Assignment, \"A-matrix\", for each qubit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "41455e64",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.230045Z",
     "start_time": "2022-11-14T15:58:03.220511Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.9934, 0.01  ],\n",
       "       [0.0066, 0.99  ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build the \"Assignment\" matrix\n",
    "A0 = np.array([[1-P10, P01],\n",
    "               [P10, 1-P01]])\n",
    "A0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad2cee5f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.689974Z",
     "start_time": "2022-11-14T15:58:03.231930Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 234,
       "width": 298
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(4,4))\n",
    "\n",
    "im = ax.matshow(A0)\n",
    "ax.grid(False)\n",
    "# Coordinates for annotations are (x,y) NOT matrix (row, col)\n",
    "ax.annotate('$P_{00}$', (0,0), fontsize=16, ha='center', va='center')\n",
    "ax.annotate('$P_{11}$', (1,1), fontsize=16, ha='center', va='center')\n",
    "ax.annotate('$P_{01}$', (1,0), fontsize=16, ha='center', va='center', color='white')\n",
    "ax.annotate('$P_{10}$', (0,1), fontsize=16, ha='center', va='center', color='white')\n",
    "ax.set_xticks([0, 1])\n",
    "ax.set_xticklabels(['$|0\\\\rangle_{\\\\rm in}$', '$|1\\\\rangle_{\\\\rm in}$'])\n",
    "ax.set_yticks([0, 1])\n",
    "ax.set_yticklabels(['$|0\\\\rangle_{\\\\rm out}$', '$|1\\\\rangle_{\\\\rm out}$'])\n",
    "fig.colorbar(im, shrink=0.8);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b84a564",
   "metadata": {},
   "source": [
    "The interpretation of the A-matrix is as follows.  The column indices label the target bit-string state, while the row indicates what you actually got in your experiment.  Thus we see that the matrix elements $P_{ij}$ tell us the probability of starting in state $j$, but ending up in state $i$.  Typically $P_{01} > P_{10}$ because relaxation of the $|1\\rangle$ state to the $|0\\rangle$ is the dominante source of error. Notice that the sum over all the elements of each column is `1`; an input bit-string has to go somehwere."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e26ce98",
   "metadata": {},
   "source": [
    "The average of the two error rates, $P_{01}$ and $P_{10}$, is called the ``readout_error`` and it is also reported by the backend for each qubit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "569a2b92",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.698326Z",
     "start_time": "2022-11-14T15:58:03.693061Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.008299999999999974,\n",
       " datetime.datetime(2021, 12, 9, 0, 30, 10, tzinfo=tzoffset(None, -18000)))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "props.qubit_property(0, 'readout_error')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9084040f",
   "metadata": {},
   "source": [
    "Lets take a look at the distribution of these values over a full system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8490f0c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.706913Z",
     "start_time": "2022-11-14T15:58:03.701077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median: 0.013399999999999967\n",
      "Mean: 0.01886666666666666\n"
     ]
    }
   ],
   "source": [
    "meas_errors = [props.qubit_property(qubit, 'readout_error')[0] \n",
    "               for qubit in range(backend.configuration().num_qubits)]\n",
    "\n",
    "print('Median:', np.median(meas_errors))\n",
    "print('Mean:', np.mean(meas_errors))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c053a7a8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:03.960080Z",
     "start_time": "2022-11-14T15:58:03.709597Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 266,
       "width": 425
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.hist(meas_errors, bins=27)\n",
    "ax.set_xlabel('Error rate');\n",
    "ax.set_ylabel('Counts');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bada2415-1eaa-4938-9c34-196c8644191a",
   "metadata": {},
   "source": [
    "We see that the error rates can vary by and order of magnitude over a quantum chip.  Therefore qubit selection and ultimately readout mitigation is needed to reduce the impact of measurement imperfections.  How to do this is the topic of the next section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77eed1cb-ef16-4903-b09c-3ac991c17cc4",
   "metadata": {},
   "source": [
    "## Mitigating measurement errors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06fe0d0d",
   "metadata": {},
   "source": [
    "The A-matrix leads us to a very simple linear expression for how measurement errors affect our output probability distribution:\n",
    "\n",
    "$$\n",
    "\\vec{p}_{\\rm exp} = A\\vec{p}_{\\rm ideal}\n",
    "$$\n",
    "\n",
    "where $\\vec{p}_{\\rm ideal}$ is a vector representation of the ideal distribution (including gate errors) over all computational basis states, and $\\vec{p}_{\\rm exp}$ is the actual distribution we measured in the experiment.  This equation is valid for not just a single qubit, but any number of measured qubits, but the dimensionality of the full linear system of equations grows exponentially in the number of qubits.  Assuming readout out errors are independent, the full A-matrix takes the form:  $A=A_{n-1}\\otimes\\dots\\otimes A_{1}\\otimes A_{0}$ "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "987a5a07",
   "metadata": {},
   "source": [
    "The equation above is a linear equation of the form $A\\vec{x}=\\vec{b}$, where we are solving for the unknown vector $\\vec{x}=\\vec{p}_{\\rm ideal}$.  Let try solving it for a very simple example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "302a8ab9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:05.482209Z",
     "start_time": "2022-11-14T15:58:03.962525Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': 96, '1': 9904}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(1)\n",
    "qc.x(0)\n",
    "qc.measure_all()\n",
    "\n",
    "# Here we are using \"seed_simulator\" to fix the output\n",
    "counts = backend.run(qc, shots=1e4, seed_simulator=12345).result().get_counts()\n",
    "counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc013e25-e3de-4e86-87cc-28f27c753166",
   "metadata": {},
   "source": [
    "Because the A-matrix deals with probabilities, we need to convert the sampled statistics returned by the processor into probabilities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "131757ff",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:05.495649Z",
     "start_time": "2022-11-14T15:58:05.488825Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.0096, 0.9904])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts_vec = np.array([counts.get('0', 0), counts.get('1', 0)], dtype=float)\n",
    "counts_vec /= 1e4\n",
    "counts_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c09b10e4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:05.505004Z",
     "start_time": "2022-11-14T15:58:05.498696Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.06752085e-04,  1.00040675e+00])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.solve(A0, counts_vec)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8fa206f-0407-46b3-adc7-aa619e130965",
   "metadata": {},
   "source": [
    "After running the above code you should see that the probability of getting `'1'` is nearly 1.0.  In fact it can be even larger than 1, with a negative probability for being found in the `'0'` state!  This is not an error or bug, but rather a consequence of the fact that there are fluctuations in sampling statistics that can lead to over- or under-correction.  The output from measurement mitigation is a wider class of distibutions known as quasi-probability distributions; Distributions that can contain negative values, but never the less sum up to one.  This fact raises an important limitation on what we can do with these distributions; **Quasi-probability distributions can only be directly used to compute expectation values of observables or finding the most probable bit-string**.  They cannot be used, for example, for computing the fidelity of the result against a known answer."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae84a35e",
   "metadata": {},
   "source": [
    "## Measurement mitigation with M3\n",
    "\n",
    "Given the realatively high error rates of measurements on superconducting processors, we would like to suppress these errors as much as possible.  Now, we could naively find the A-matrix corresponding to each measured qubit and take the tensor product of them all.  However, this leads to a $2^{N}\\times 2^{N}$ matrix that is tractible for only a small number of qubits, e.g. $\\lesssim 18$.  In order to correct large numbers of qubits we need to be a bit smarter than this. \n",
    "\n",
    "The M3 (**M**atrix-free **M**easurement **Mitigation**) is one example that looks at the problem in a different way."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f8801b4",
   "metadata": {},
   "source": [
    "![M3](images/meas_mitigation/m3_truncation.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f8f0f89",
   "metadata": {},
   "source": [
    "Namely, M3 considers the fact that, when measurement errors are small, the effect is to take small amounts of probability away from the correct output bit-strings and move them to erroneous bit-strings that are close in terms of Hamming distance.  Because the errors are weak, with sufficient sampling, it is unlikely that an ideal bit-string is completely redistributed; the correct answer is a subset of the noisy output.  This insight indicates that we can truncate the full A-matrix into one that has a dimension that is equal to the number of unique bit-strings in the output.  This equation is typically much much smaller than the full A-matrix, and thus easier to solve, e.g. via LU decomposition or iterative methods."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fffc2b5",
   "metadata": {},
   "source": [
    "M3 measurement mitigation can be broken into 3 steps:\n",
    "\n",
    "1. Construct a mitigator targeting a backend (`backend`)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "189f90a2",
   "metadata": {},
   "source": [
    "```python\n",
    "import mthree\n",
    "mit = mthree.M3Mitigation(backend)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef23380",
   "metadata": {},
   "source": [
    "2. Use the mitigator `mit` to calibrate over a list of physical qubits (`qubits`) measured\n",
    "\n",
    "\n",
    "```python\n",
    "mit.cals_from_system(qubits)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aed3060c",
   "metadata": {},
   "source": [
    "3. Generate a corrected set of quasiprobabilities from a given set of noisy counts data `raw_counts`:\n",
    "\n",
    "```python\n",
    "quasi_probs = mit.apply_correction(raw_counts, qubits)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f3b946",
   "metadata": {},
   "source": [
    "We can then use these quasiprobabilities to compute any diagonal expectation values that we like.  This can be done in M3, but can also be done in Qiskit 0.22+ using the `sampled_expectation_value` function:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17e14baf",
   "metadata": {},
   "source": [
    "```python\n",
    "from qiskit.result import sampled_expectation_value\n",
    "\n",
    "mitigated_result = sampled_expectation_value(quasi_probs, observable)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ad29f71",
   "metadata": {},
   "source": [
    "## Example\n",
    "\n",
    "### Setup\n",
    "\n",
    "To begin, let us consider the following \"controlled-Hadamard ladder\" circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1fbe200d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:05.986112Z",
     "start_time": "2022-11-14T15:58:05.507933Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 387.597x385.28 with 1 Axes>"
      ]
     },
     "execution_count": 14,
     "metadata": {
      "image/png": {
       "height": 305,
       "width": 307
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 6\n",
    "qc = QuantumCircuit(N)\n",
    "\n",
    "qc.x(range(N))\n",
    "qc.h(range(N))\n",
    "\n",
    "for kk in range(N // 2, 0, -1):\n",
    "    qc.ch(kk, kk - 1)\n",
    "for kk in range(N // 2, N - 1):\n",
    "    qc.ch(kk, kk + 1)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b09cb000",
   "metadata": {},
   "source": [
    "This circuit is interesting in that it has a non-trivial output distribution and expectation value.  Because the circuit is small, we can directly compute the statevector from this circuit and grab the ideal probability distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7eb32431",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:05.996770Z",
     "start_time": "2022-11-14T15:58:05.988658Z"
    }
   },
   "outputs": [],
   "source": [
    "# Generate output statevector assuming initial state was ground state\n",
    "state_vec = Statevector.from_instruction(qc)\n",
    "# Generate ideal distribution from state vector (infinite sampling limit)\n",
    "ideal_probs = state_vec.probabilities_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe51168d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-07-08T17:10:23.288136Z",
     "start_time": "2022-07-08T17:10:22.081681Z"
    }
   },
   "source": [
    "Given the ideal distribution we can compute the expectation value for any diagonal operator that we like, e.g. `ZZZZZZ`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2123c6b4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:06.058140Z",
     "start_time": "2022-11-14T15:58:05.999566Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4374999999999999"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_expectation_value(ideal_probs, 'Z'*N)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4e1df47",
   "metadata": {},
   "source": [
    "### Execution\n",
    "\n",
    "Let us now transpile the circuit and get the noisy output distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "99b04b8e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:07.586357Z",
     "start_time": "2022-11-14T15:58:06.059961Z"
    }
   },
   "outputs": [],
   "source": [
    "# First add some measurements to the circuit\n",
    "qc_with_meas = qc.measure_all(inplace=False)\n",
    "# transpile circuits with measurements\n",
    "trans_qc = transpile(qc_with_meas, backend, optimization_level=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a83a478c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:07.944656Z",
     "start_time": "2022-11-14T15:58:07.588643Z"
    }
   },
   "outputs": [],
   "source": [
    "noisy_counts = backend.run(trans_qc, shots=1e4).result().get_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8de8ac86",
   "metadata": {},
   "source": [
    "Now let us compute the noisy expectation value :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "05992a49",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:07.951407Z",
     "start_time": "2022-11-14T15:58:07.946883Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3428"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_expectation_value(noisy_counts, 'Z'*N)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3208e6d",
   "metadata": {},
   "source": [
    "So we get something a bit lower than the target `0.4375`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f111f15",
   "metadata": {},
   "source": [
    "### Mitigation with M3\n",
    "\n",
    "Let us now follow our 3-step recipe for using M3. \n",
    "\n",
    "First we contruct our mitigator object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2d9d662b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:07.957271Z",
     "start_time": "2022-11-14T15:58:07.954123Z"
    }
   },
   "outputs": [],
   "source": [
    "mit = mthree.M3Mitigation(backend)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c0c69a2",
   "metadata": {},
   "source": [
    "We now need to calibrate the mitigator for the physical qubits that we measure at the end of the circuit.  But our circuit has been transpiled; the physical qubit indices need not match the virtual qubit indices in the circuit.  How do we determine which qubits are being measured?\n",
    "\n",
    "We could look at the circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f33ec198",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:08.925664Z",
     "start_time": "2022-11-14T15:58:07.960245Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1281.6x445.48 with 1 Axes>"
      ]
     },
     "execution_count": 21,
     "metadata": {
      "image/png": {
       "height": 358,
       "width": 982
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# idle_wires=False shows only active qubits in the circuit\n",
    "trans_qc.draw('mpl', idle_wires=False) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6947928",
   "metadata": {},
   "source": [
    "From the circuit drawing we see that circuit qubits 0->5 are mapped to physical qubits `[14,16,19,22,25,26]`.  These are the qubits we need to calibrate.  \n",
    "\n",
    "We can also find this set programmatically via M3:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f4c932e6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:08.933015Z",
     "start_time": "2022-11-14T15:58:08.928145Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{14: 0, 16: 1, 19: 2, 22: 3, 25: 4, 26: 5}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping = mthree.utils.final_measurement_mapping(trans_qc)\n",
    "mapping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9a93715",
   "metadata": {},
   "source": [
    "This \"mapping\" contains the same information, and allows us to easily determine which qubits are being used.  Let us now calibrate the mitigator `mit`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1715314b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:09.778646Z",
     "start_time": "2022-11-14T15:58:08.935251Z"
    }
   },
   "outputs": [],
   "source": [
    "mit.cals_from_system(mapping) # We can directly pass the computed mapping or the list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1186e248",
   "metadata": {},
   "source": [
    "We can view the individual A-matrices that are generated from the calibrations, and see that we did indeed calibrate the correct physical qubits:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9c380e94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " None,\n",
       " array([[0.9934, 0.012 ],\n",
       "        [0.0066, 0.988 ]]),\n",
       " None,\n",
       " array([[0.9836, 0.0152],\n",
       "        [0.0164, 0.9848]]),\n",
       " None,\n",
       " None,\n",
       " array([[0.9951, 0.0092],\n",
       "        [0.0049, 0.9908]]),\n",
       " None,\n",
       " None,\n",
       " array([[0.9937, 0.0172],\n",
       "        [0.0063, 0.9828]]),\n",
       " None,\n",
       " None,\n",
       " array([[0.9848, 0.023 ],\n",
       "        [0.0152, 0.977 ]]),\n",
       " array([[0.9935, 0.0072],\n",
       "        [0.0065, 0.9928]])]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mit.single_qubit_cals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6788e62e",
   "metadata": {},
   "source": [
    "We are now in a position to perform the actual mitigation and compute the mitigated expectation value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ab78cd4d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:09.786194Z",
     "start_time": "2022-11-14T15:58:09.781391Z"
    }
   },
   "outputs": [],
   "source": [
    "quasi = mit.apply_correction(noisy_counts, mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7fb0fd77",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:09.796802Z",
     "start_time": "2022-11-14T15:58:09.789705Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40678438959898355"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_expectation_value(quasi, 'Z'*6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f550b60",
   "metadata": {},
   "source": [
    "We see that the mitigated value is much closer to the ideal answer `0.4375`.  Indeed, the error that remains is primarily due to gate errors that require additional mitigation techniques to suppress."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e53d848",
   "metadata": {},
   "source": [
    "## Mitigated observable uncertainties\n",
    "\n",
    "While measurement mitigation improves the accuracy of expectation values, this comes at the cost of an increase variance (loss of precision) in the final output.  This is because mitigating measurement errors add uncertainty on top of the uncertainty already present in the ideal distribution. \n",
    "\n",
    "Without mitigation, an upper bound for the variance of an expectation value with absolute value $\\leq 1$ is given by $1/\\rm shots$, or equivilently for the standard deviation $1/\\sqrt{\\rm shots}$.\n",
    "\n",
    "The increase in variance from mitigation is called the `mitigation_overhead` ($\\Gamma$) in M3.  This feeds into the upper-bound for the variance (standard deviation) as $\\Gamma/\\rm shots$ ($\\sqrt{\\Gamma/\\rm shots}$)\n",
    "\n",
    "M3 does not compute this value by default as it inccurs additional overhead.  To compute this value we need to pass `return_mitigation_overhead=True` when we compute the correction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d66fcd66",
   "metadata": {},
   "outputs": [],
   "source": [
    "quasi_with_error = mit.apply_correction(noisy_counts, mapping, \n",
    "                                        return_mitigation_overhead=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1099933",
   "metadata": {},
   "source": [
    "The resulting mitigation overhead is now an attribute of the returned quasi-distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "509278da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4005884526744052"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quasi_with_error.mitigation_overhead"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1250f556",
   "metadata": {},
   "source": [
    "This is telling us that, in order to get the same upper bound on the variance as the unmitigated case, we need to do $\\Gamma$ times more shots.  If for example, we wanted to compute the standard deviation for this result (at 1e4 shots) we could do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "78a4ea65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01183464597136055"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(quasi_with_error.mitigation_overhead / 1e4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38fd3a5a",
   "metadata": {},
   "source": [
    "Or take advantage of the fact that M3 will compute this for you:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4a42ebff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01183464597136055"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quasi_with_error.stddev()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74893847",
   "metadata": {},
   "source": [
    "Or, even better we can get the expectation value and standard deviation in a single call:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e1e1a4d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.40678438959898355, 0.01183464597136055)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quasi_with_error.expval_and_stddev('Z'*6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "633927ca",
   "metadata": {},
   "source": [
    "Note that the mitigation overhead scales exponentially in the number of qubits.  The base of this exponential is determined by the circuit and quality of the device on which the circuit(s) is run; An ideal system has $\\Gamma=1$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9b7522c",
   "metadata": {},
   "source": [
    "### Mitigating sampling problems\n",
    "\n",
    "Up until now we have focused on mitigating expectation values, as many near-term applications return expectation values.  However, it is also possible to mitigate sampling problems such as BV, Grovers, etc.. where one is interested in finding the most probable bit-string.  Consider the BV circuit for all-ones bitstrings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "26f1ed62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 808.997x385.28 with 1 Axes>"
      ]
     },
     "execution_count": 32,
     "metadata": {
      "image/png": {
       "height": 305,
       "width": 625
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def bv_ones_circs(N):\n",
    "    qc = QuantumCircuit(N, N-1)\n",
    "    qc.x(N-1)\n",
    "    qc.h(range(N))\n",
    "    qc.cx(range(N-1), N-1)\n",
    "    qc.h(range(N-1))\n",
    "    qc.barrier()\n",
    "    qc.measure(range(N-1), range(N-1))\n",
    "    return qc\n",
    "\n",
    "N = 5\n",
    "bv_circ = bv_ones_circs(N)\n",
    "bv_circ.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227750ee",
   "metadata": {},
   "source": [
    "We can ask ourselves what is the most-probable bit-string as a function of the number of qubits `N` in the circuit.  Ideally this should be `'1'*(N-1)`.  Lets see if this is true, and if we can improve the probability of success.\n",
    "\n",
    "First we generate a collection of circuits for different `N` values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3ff34a3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "bv_circs = [bv_ones_circs(N) for N in range(2, 13)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13607120",
   "metadata": {},
   "source": [
    "We of course have to map them to the target system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f57cd43f",
   "metadata": {},
   "outputs": [],
   "source": [
    "trans_bv_circs = transpile(bv_circs, backend, optimization_level=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32589eba",
   "metadata": {},
   "source": [
    "Now let us run them all on our noisy simulator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "457d55d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_bv_counts = backend.run(trans_bv_circs, shots=int(1e4)).result().get_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "186aecd9",
   "metadata": {},
   "source": [
    "To compute the most likely bit-string and the associated probability we make a little function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7f24f634",
   "metadata": {},
   "outputs": [],
   "source": [
    "def most_likely_bitstring(dist):\n",
    "    \"\"\"Return the most likely bit-string from a distribution\n",
    "    \n",
    "    Parameters:\n",
    "        dist (dict_like): Input distribution\n",
    "        \n",
    "    Returns:\n",
    "        str: Most likely bit-string\n",
    "        float: Bit-string probability\n",
    "    \"\"\"\n",
    "    shots = sum(dist.values())\n",
    "    max_bitstring = None\n",
    "    max_prob = 0\n",
    "    for key, value in dist.items():\n",
    "        temp = value / shots\n",
    "        if temp > max_prob:\n",
    "            max_prob = temp\n",
    "            max_bitstring = key\n",
    "    return max_bitstring, max_prob"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eec6f208",
   "metadata": {},
   "source": [
    "and compute the results on our raw data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "49a1ce49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('1', 0.9881),\n",
       " ('11', 0.9632),\n",
       " ('111', 0.9485),\n",
       " ('1111', 0.9106),\n",
       " ('11111', 0.8158),\n",
       " ('111111', 0.8447),\n",
       " ('1111111', 0.7188),\n",
       " ('11111111', 0.7008),\n",
       " ('111111111', 0.6094),\n",
       " ('1111111111', 0.5533),\n",
       " ('11111111111', 0.6864)]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[most_likely_bitstring(cnts) for cnts in raw_bv_counts]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a028f36",
   "metadata": {},
   "source": [
    "Now, we can proceed like we did before by building a M3 mitigator, finding the physical qubits used, calibrating those qubits, and applying the correction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "437f9715",
   "metadata": {},
   "outputs": [],
   "source": [
    "mit = mthree.M3Mitigation(backend)\n",
    "mappings = mthree.utils.final_measurement_mapping(trans_bv_circs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39ff124c",
   "metadata": {},
   "source": [
    "Now, we need to be a bit careful here because the total number of unique qubits in the mapping can be large as the Qiskit transpiler tries to move the circuit around on the physical qubits to supress errors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5fd71f41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[dict_keys([1]),\n",
       " dict_keys([0, 4]),\n",
       " dict_keys([4, 0, 2]),\n",
       " dict_keys([7, 2, 4, 0]),\n",
       " dict_keys([25, 22, 14, 13, 8]),\n",
       " dict_keys([3, 0, 2, 4, 1, 6]),\n",
       " dict_keys([22, 19, 9, 8, 11, 16, 13]),\n",
       " dict_keys([20, 22, 13, 8, 14, 11, 16, 10]),\n",
       " dict_keys([13, 20, 22, 8, 14, 19, 16, 11, 10]),\n",
       " dict_keys([22, 20, 10, 12, 19, 16, 9, 14, 13, 8]),\n",
       " dict_keys([25, 20, 19, 22, 16, 8, 11, 14, 7, 10, 13])]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(item.keys() for item in mappings)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "646521b0",
   "metadata": {},
   "source": [
    "Because noisy simulations over many qubits is difficult, here we change the method for easier simulation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b25ea912",
   "metadata": {},
   "outputs": [],
   "source": [
    "mit.cals_from_system(mappings, method='independent')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfedb6f8",
   "metadata": {},
   "source": [
    "We apply the correction and recompute the most likely bit-strings and probabilities:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1f79c1bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "quasis = mit.apply_correction(raw_bv_counts, mappings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5f18cdee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('1', 0.9965401444998474),\n",
       " ('11', 0.9851359319635592),\n",
       " ('111', 0.9867708059034757),\n",
       " ('1111', 0.9645667763352116),\n",
       " ('11111', 0.8947715665347649),\n",
       " ('111111', 0.9134275936499842),\n",
       " ('1111111', 0.8188130485044268),\n",
       " ('11111111', 0.8307768154945566),\n",
       " ('111111111', 0.7286470895401345),\n",
       " ('1111111111', 0.7348082900639324),\n",
       " ('11111111111', 0.8530190370847195)]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[most_likely_bitstring(cnts) for cnts in quasis]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ea25516",
   "metadata": {},
   "source": [
    "We see a very large improvement in the overall probability of the ideal bit-string.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66a8bb23",
   "metadata": {},
   "source": [
    "## Hands-on exercise\n",
    "\n",
    "Papers on readout error mitigation usually look at mitigation applied to the output of GHZ states $|\\psi\\rangle = |0^{\\otimes N}\\rangle + |1^{\\otimes N}\\rangle$ for even `N` as the expectation value is equal to `1.0`.\n",
    "\n",
    "Try to build as large a GHZ state as possible, largest $N$, such that the expectation value is $ >=0.5$ after applying M3.  Make a plot of the expectation value for increasing $N$, before and after mitigation, making sure to plot twice the mitigated standard deviation as well.  Feel free to try one of the GHZ circuit generators below.\n",
    "\n",
    "The Matplotlib `errorbar` function will help you plot the error bars easily."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6b3f8b7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dense_ghz(N):\n",
    "    \"\"\"Creates a GHZ state using the same qubit as the control.\n",
    "    \n",
    "    Parameters:\n",
    "        N (int): The number of qubits\n",
    "        \n",
    "    Returns:\n",
    "        QuantumCircuit: Circuit for GHZ state\n",
    "    \"\"\"\n",
    "    qc = QuantumCircuit(N)\n",
    "    qc.h(0)\n",
    "    qc.cx(0, range(1, N))\n",
    "    qc.measure_all()\n",
    "    return qc\n",
    "\n",
    "\n",
    "def linear_ghz(N):\n",
    "    \"\"\"Creates a GHZ state using a ladder of CX gates.\n",
    "    \n",
    "    Parameters:\n",
    "        N (int): The number of qubits\n",
    "        \n",
    "    Returns:\n",
    "        QuantumCircuit: Circuit for GHZ state\n",
    "    \"\"\"\n",
    "    qc = QuantumCircuit(N)\n",
    "    qc.h(0)\n",
    "    qc.cx(range(N-1), range(1, N))\n",
    "    qc.measure_all()\n",
    "    return qc\n",
    "\n",
    "\n",
    "def parallel_ghz(N):\n",
    "    \"\"\"Creates a GHZ state using parallel CX gates.\n",
    "    \n",
    "    Parameters:\n",
    "        N (int): The number of qubits\n",
    "        \n",
    "    Returns:\n",
    "        QuantumCircuit: Circuit for GHZ state\n",
    "    \"\"\"\n",
    "    qc = QuantumCircuit(N)\n",
    "    qc.h(N//2)\n",
    "    qc.cx(range(N//2, 0, -1), range(N//2-1, -1, -1))\n",
    "    if N > 2:\n",
    "        qc.cx(range(N//2,N-1), range(N//2+1, N))\n",
    "    qc.measure_all()\n",
    "    return qc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "91c34b15",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T15:58:10.391700Z",
     "start_time": "2022-11-14T15:58:09.800405Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td><code>qiskit-terra</code></td><td>0.22.3</td></tr><tr><td><code>qiskit-aer</code></td><td>0.11.2</td></tr><tr><td><code>qiskit-ibmq-provider</code></td><td>0.19.2</td></tr><tr><td><code>qiskit</code></td><td>0.39.4</td></tr><tr><th>System information</th></tr><tr><td>Python version</td><td>3.10.8</td></tr><tr><td>Python compiler</td><td>Clang 14.0.6 </td></tr><tr><td>Python build</td><td>main, Nov 22 2022 08:25:29</td></tr><tr><td>OS</td><td>Darwin</td></tr><tr><td>CPUs</td><td>8</td></tr><tr><td>Memory (Gb)</td><td>16.0</td></tr><tr><td colspan='2'>Sat Dec 10 06:55:15 2022 EST</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import qiskit.tools.jupyter\n",
    "%qiskit_version_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36f5d071",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
