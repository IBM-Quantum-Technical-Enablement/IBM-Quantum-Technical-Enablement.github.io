{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0e1aabe7",
   "metadata": {},
   "source": [
    "![beta](images/runtime3/beta-version.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd8c0aa",
   "metadata": {},
   "source": [
    "# Qiskit Runtime - III"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b7e4d5a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "    This notebook is requires installing the <tt>qiskit-ibm-runtime</tt>:\n",
    "    <ul>\n",
    "        <li>IBM Qiskit Runtime: <tt>pip install qiskit-ibm-runtime</tt></li>\n",
    "    </ul>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10624c06",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "We now look at one of the primary usecases of Runtime primitives and Sessions, namely iterative algorithms.  The ability of a `Session` to lock a quantum processor, provides a substantial speed-up over previous methods of job execution.  Together with the simplified interface for computing expectation values using the `Estimator`, implementing iterative / variational algorithms is quite simple.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "058053d2",
   "metadata": {},
   "source": [
    "## Frontmatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e392dcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit import *\n",
    "\n",
    "# Get sampled expectation value function\n",
    "from qiskit.result import sampled_expectation_value\n",
    "\n",
    "from qiskit.circuit.library import EfficientSU2\n",
    "\n",
    "# Operators from Qiskit\n",
    "from qiskit.quantum_info import SparsePauliOp\n",
    "\n",
    "# Import the SPSA optimizer\n",
    "from qiskit.algorithms.optimizers import SPSA\n",
    "\n",
    "# The IBM Quantum Runtime\n",
    "from qiskit_ibm_runtime import QiskitRuntimeService\n",
    "from qiskit_ibm_runtime import Estimator, Session\n",
    "\n",
    "# Estimator from Aer\n",
    "from qiskit_aer.primitives import Estimator as AerEstimator\n",
    "\n",
    "# Plotting tools\n",
    "import matplotlib.pyplot as plt\n",
    "try:\n",
    "    plt.style.use('quantum-light')\n",
    "except:\n",
    "    pass\n",
    "%config InlineBackend.figure_format = 'retina'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbf5d4b7",
   "metadata": {},
   "source": [
    "Let us load the Runtime service and select our backend:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "00fdcd46",
   "metadata": {},
   "outputs": [],
   "source": [
    "service = QiskitRuntimeService(instance='system-request/3-27-23-access/main')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "37fea862",
   "metadata": {},
   "outputs": [],
   "source": [
    "backend = service.get_backend('ibmq_kolkata')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "569540d2",
   "metadata": {},
   "source": [
    "## Setting up the problem\n",
    "\n",
    "Here we will attempt to find the ground state energy of the following 2Q Hamiltonian:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23fef0b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "H_oper = SparsePauliOp.from_list([('YZ', 0.39793742484318045),\n",
    "                                  ('ZI', -0.39793742484318045),\n",
    "                                  ('ZZ', -0.01128010425623538),\n",
    "                                  ('XX', 0.18093119978423156)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0e0e440",
   "metadata": {},
   "source": [
    "Before proceeding, let us first make sure we know the target energy we are looking for.  We do this via direct eigensolving of the matrix representation of H:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "70809817",
   "metadata": {},
   "outputs": [],
   "source": [
    "H_mat = H_oper.to_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f530e6ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.70278562, -0.45302961,  0.45302961,  0.70278562])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.eigvalsh(H_mat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0fbd73b",
   "metadata": {},
   "source": [
    "with the target energy being the 0-th element of the above array.\n",
    "\n",
    "In addition to the Hamiltonian, variational algorithms like VQE require a parameterized trial state over which to optimize.  Here we use the `EfficientSU2` ansatz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "776098a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 872.572x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "image/png": {
       "height": 182,
       "width": 726
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ansatz = EfficientSU2(2)\n",
    "\n",
    "ansatz.draw('mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "82c379c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1039.79x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 8,
     "metadata": {
      "image/png": {
       "height": 182,
       "width": 862
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transpile(ansatz, basis_gates=['rx', 'ry', 'rz', 'cx']).draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dbbbb10",
   "metadata": {},
   "source": [
    "and generate an initial guess for the ansatz parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "687572d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_params = ansatz.num_parameters\n",
    "params = 2*np.pi*np.random.random(num_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddeb52cf",
   "metadata": {},
   "source": [
    "## Building the cost function\n",
    "\n",
    "A general cost function for VQE is incredibly easy to write down using Runtime.  No longer does one have to add post-rotation gates and measurements, bind parameters to the circuits, execute circuits and possibly mitigate the results.  Instead, all of this is done internally by the `Estimator`.  The only minor difficulty here is that the optimizers in Qiskit do not allow arguments to be passed, see [qiskit-terra#9270](https://github.com/Qiskit/qiskit-terra/issues/9270), so we have to get creative if we want to reuse the cost function for different backends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "72342dda",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_cost_function(estimator, shots=int(1e4)):\n",
    "    \"\"\" Wrapper that allows for setting estimator for cost function\n",
    "    \"\"\"\n",
    "    def vqe_function(params, shots=shots):\n",
    "        \"\"\"Return estimate of energy from estimator\n",
    "\n",
    "        Parameters:\n",
    "            params (ndarray): Array of ansatz parameters\n",
    "            estimator (Estimator): Estimator instance\n",
    "            shots (int): Number of shots to take\n",
    "\n",
    "        Returns:\n",
    "            float: Energy estimate\n",
    "        \"\"\"\n",
    "        energy = estimator.run(ansatz, H_oper, shots=shots,\n",
    "                               parameter_values=params).result().values[0]\n",
    "        return energy\n",
    "    \n",
    "    return vqe_function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "926986d7",
   "metadata": {},
   "source": [
    "## Validation on simulator\n",
    "\n",
    "VQE runs on hardware can be quite costly in terms of time.  Therefore let us first check using a simulator that everything works.  We first create an Aer estimator, and build our cost function that uses it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "af3581be",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimator = AerEstimator()\n",
    "cost_func = build_cost_function(estimator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f16dde3",
   "metadata": {},
   "source": [
    "Out of the collection of optimizers in Qiskit (as well as SciPy), here we use the Simultaneous Perturbation Stochastic Approximation (SPSA) optimizer.  This optimizer is used heavily when executing variational algorithms on noisy devices as it is capable of handling landscapes that are non-smooth and non-differentiable due to noise fluctuations.  In addition, SPSA requires only 2 function evaluations per step, independent of the number of parameters, making it efficient as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3832bfea",
   "metadata": {},
   "outputs": [],
   "source": [
    "optim = SPSA()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "433df4bd",
   "metadata": {},
   "source": [
    "We can pass our cost function, along with the initial guess of parameters and the optimizer + Estimator take care of the execution for us. Here we use the default 100 max iterations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "12844459",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = optim.minimize(cost_func, x0=params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5a19b3bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{   'fun': -0.5913841946780772,\n",
      "    'jac': None,\n",
      "    'nfev': 200,\n",
      "    'nit': 100,\n",
      "    'njev': None,\n",
      "    'x': array([-0.16142931,  3.16733055, -0.93950939,  6.43391459,  2.82139663,\n",
      "        3.47837716,  5.46738299,  1.75341666,  2.84903969,  7.57663005,\n",
      "        6.67334981,  1.57673046,  0.19667718,  0.35163056,  3.53750536,\n",
      "        6.76305369])}\n"
     ]
    }
   ],
   "source": [
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "124510c6",
   "metadata": {},
   "source": [
    "## Execution on a real system\n",
    "\n",
    "Now let us try this on a real system.  Note that we will be doing (assuming we do 100 iterations, the max default) 8 million total circuit executions in this experiment.  That, along with software overheads in the `Estimator` and elsewhere means that executing this code will take a bit of time. \n",
    "\n",
    "To begin we initialize a `Session` where we are going to lock the processor to our batch of jobs, and build an `Estimator` to use the session and backend:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d1081f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "session = Session(service=service, backend=backend)\n",
    "estimator = Estimator(session=session)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f1cc873",
   "metadata": {},
   "source": [
    "We crate a new cost function that uses this real backend estimator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2dcd042d",
   "metadata": {},
   "outputs": [],
   "source": [
    "real_cost_func = build_cost_function(estimator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de936ed0",
   "metadata": {},
   "source": [
    "And finally initialize a new SPSA optimizer and execute it with our new cost functon (this will take a while):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "79f9d734",
   "metadata": {},
   "outputs": [],
   "source": [
    "optim = SPSA()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a282bf42",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = optim.minimize(real_cost_func, x0=params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "36f0c1cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{   'fun': -0.6243230106982854,\n",
      "    'jac': None,\n",
      "    'nfev': 200,\n",
      "    'nit': 100,\n",
      "    'njev': None,\n",
      "    'x': array([-0.28556975,  1.21665913, -1.19370642,  7.11897938,  2.11077645,\n",
      "        4.64932254,  7.27420975,  3.57581487,  3.81028277,  7.10831211,\n",
      "        8.73848336,  4.69809586, -2.11806856, -2.63186112,  4.60333319,\n",
      "        4.16633478])}\n"
     ]
    }
   ],
   "source": [
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a585e948",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
