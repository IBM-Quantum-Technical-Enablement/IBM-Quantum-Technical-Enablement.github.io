{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "af496679",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "10c5d049",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit import *\n",
    "from qiskit.quantum_info import hellinger_fidelity\n",
    "\n",
    "\n",
    "# Operators from Qiskit\n",
    "from qiskit.quantum_info import SparsePauliOp\n",
    "\n",
    "# Ansatz import\n",
    "from qiskit.circuit.library import RealAmplitudes\n",
    "\n",
    "# Runtime imports\n",
    "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler, Estimator, Session, Options\n",
    "\n",
    "# Plotting tools\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib_inline\n",
    "matplotlib_inline.backend_inline.set_matplotlib_formats('retina')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83ef1c55",
   "metadata": {},
   "source": [
    "# Setup: Test circuit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dfe26577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "image/png": {
       "height": 238,
       "width": 563
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 3\n",
    "ansatz = RealAmplitudes(num_qubits=N, reps=1, entanglement=\"circular\", insert_barriers=True)\n",
    "qc = ansatz.decompose()\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "854835ce",
   "metadata": {},
   "source": [
    "# Qiskit Runtime Primitive: Estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8fe6ac18",
   "metadata": {},
   "outputs": [],
   "source": [
    "instance = \"system-request/7-14-23-access/main\"\n",
    "service = QiskitRuntimeService(instance=instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db71ef92",
   "metadata": {},
   "outputs": [],
   "source": [
    "# very similar to the Sampler construct. Only addition is the `observables` parameter\n",
    "# estimator jobs need an operator\n",
    "def run_with_estimator_in_session(circuits, observables, service, estimator_name, params=None, options=None):\n",
    "    \"\"\"Wrapper for running circuits with runtime Sampler inside a Session.\n",
    "    We will be re-using this construct a number of time. Therefore, it is warpped\n",
    "    insided a function for re-usability.\n",
    "    \"\"\"\n",
    "    with Session(service=service, backend=estimator_name) as session:\n",
    "        estimator = Estimator(session=session, options=options)\n",
    "        job = estimator.run(circuits, observables, parameter_values=params)\n",
    "        result = job.result()\n",
    "\n",
    "    session.close()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf26d017",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.64075, -0.6555 , -0.67225, -0.656  , -0.6515 ])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimator_name = \"ibmq_qasm_simulator\"\n",
    "oper = SparsePauliOp.from_list([\n",
    "    (\"IIZ\", 1.0),\n",
    "    (\"XIY\", -0.5),\n",
    "    (\"ZYX\", 1.0)\n",
    "])\n",
    "\n",
    "# create some random initial parameters\n",
    "num_params = ansatz.num_parameters\n",
    "np.random.seed(0)\n",
    "init_params = 2 * np.pi * np.random.random(num_params)\n",
    "reps = 5\n",
    "res = run_with_estimator_in_session(\n",
    "    circuits=[qc]*reps,\n",
    "    observables=[oper]*reps,\n",
    "    service=service,\n",
    "    params=[init_params]*reps,\n",
    "    estimator_name=estimator_name\n",
    ")\n",
    "ideal_expvals = res.values # estimator returns expectation \"values\" whereas sampler returns \"quasi-distributions\"\n",
    "ideal_expvals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2eb1a88",
   "metadata": {},
   "source": [
    "## Configuring Estimator Options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9fd2135a",
   "metadata": {},
   "outputs": [],
   "source": [
    "options = Options()\n",
    "options.optimization_level = 0\n",
    "options.resilience_level = 0\n",
    "options.execution.shots = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8f8dbec1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ideal expectation values: [-0.6405]\n"
     ]
    }
   ],
   "source": [
    "res = run_with_estimator_in_session(\n",
    "    circuits=qc,\n",
    "    observables=oper,\n",
    "    service=service,\n",
    "    params=init_params,\n",
    "    estimator_name=estimator_name,\n",
    "    options=options\n",
    ")\n",
    "print(f\"Ideal expectation values: {res.values}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb313cd3",
   "metadata": {},
   "source": [
    "## Noisy Simulation with Runtime Estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9b5222be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fetch a noise model from backend\n",
    "from qiskit_aer.noise import NoiseModel\n",
    "\n",
    "backend = service.get_backend(\"ibm_peekskill\")\n",
    "\n",
    "noise_model = NoiseModel.from_backend(backend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "06a08552",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.simulator.noise_model = noise_model\n",
    "options.simulator.basis_gates = backend.operation_names\n",
    "options.simulator.coupling_map = backend.coupling_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d5460163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Noisy expectation values: [-0.566]\n"
     ]
    }
   ],
   "source": [
    "res_noisy = run_with_estimator_in_session(\n",
    "    circuits=qc,\n",
    "    observables=oper,\n",
    "    service=service,\n",
    "    params=init_params,\n",
    "    estimator_name=estimator_name,\n",
    "    options=options\n",
    ")\n",
    "print(f\"Noisy expectation values: {res_noisy.values}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8d037213",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.simulator.set_backend(backend) # avaialble from qiskit-ibm-runtime 0.11.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9718b40b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Noisy expectation values: [-0.578]\n"
     ]
    }
   ],
   "source": [
    "res_noisy = run_with_estimator_in_session(\n",
    "    circuits=qc,\n",
    "    observables=oper,\n",
    "    service=service,\n",
    "    params=init_params,\n",
    "    estimator_name=estimator_name,\n",
    "    options=options\n",
    ")\n",
    "print(f\"Noisy expectation values: {res_noisy.values}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f428b0d",
   "metadata": {},
   "source": [
    "## Error Suppression and Mitigation with Estimator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a368aa23",
   "metadata": {},
   "source": [
    "| Optimization Level | Sampler and Estimator |\n",
    "| --- | --- |\n",
    "| **Level 0** | No optimization and  no error suppression |\n",
    "| **Level 1** | Light optimization and Dynamical Decoupling | \n",
    "| **Level 2** | Medium optimization and Dynamical Decoupling | \n",
    "| **Level 3** | Heavy optimization and Dynamical Decoupling | "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5cd80e5",
   "metadata": {},
   "source": [
    "| Resilience Levels | Sampler | Estimator |\n",
    "| --- | --- | --- |\n",
    "| **Level 0** | No mitigation | No mitigation | \n",
    "| **Level 1** (default) | M3 readout correction | TREX readout correction | \n",
    "| **Level 2** | No mitigation | ZNE (no readout correction) | \n",
    "| **Level 3** | No mitigation | PEC | "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23ff999b",
   "metadata": {},
   "source": [
    "### Measurement Mitigation ( and Dynamical Decoupling)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1ed54105",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.optimization_level = 3 # > 0 enables dynamical decoupling\n",
    "options.resilience_level = 1 # measurement error mitigation with TReX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d6bfa27b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mitigated expectation values (DD+TReX): [-0.64260154]\n"
     ]
    }
   ],
   "source": [
    "res_mitigated = run_with_estimator_in_session(\n",
    "    circuits=qc,\n",
    "    observables=oper,\n",
    "    service=service,\n",
    "    params=init_params,\n",
    "    estimator_name=estimator_name,\n",
    "    options=options\n",
    ")\n",
    "print(f\"Mitigated expectation values (DD+TReX): {res_mitigated.values}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3239cf31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'variance': 2.058980211853376,\n",
       " 'shots': 10000,\n",
       " 'readout_mitigation_num_twirled_circuits': 16,\n",
       " 'readout_mitigation_shots_calibration': 8192}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_mitigated.metadata[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d097953",
   "metadata": {},
   "source": [
    "### ZNE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b511cfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.resilience_level = 2 # level = 2 activates ZNE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "57b9977a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Options(optimization_level=3,\n",
      "        resilience_level=2,\n",
      "        max_execution_time=None,\n",
      "        transpilation=TranspilationOptions(skip_transpilation=False,\n",
      "                                           initial_layout=None,\n",
      "                                           layout_method=None,\n",
      "                                           routing_method=None,\n",
      "                                           approximation_degree=None),\n",
      "        resilience=ResilienceOptions(noise_amplifier='TwoQubitAmplifier',\n",
      "                                     noise_factors=(1, 3, 5),\n",
      "                                     extrapolator='LinearExtrapolator'),\n",
      "        execution=ExecutionOptions(shots=10000, init_qubits=True),\n",
      "        environment=EnvironmentOptions(log_level='WARNING',\n",
      "                                       callback=None,\n",
      "                                       job_tags=[]),\n",
      "        simulator=SimulatorOptions(noise_model=<NoiseModel on ['id', 'x', 'measure', 'sx', 'reset', 'cx']>,\n",
      "                                   seed_simulator=None,\n",
      "                                   coupling_map=<qiskit.transpiler.coupling.CouplingMap object at 0x000001D4C6520450>,\n",
      "                                   basis_gates=['id',\n",
      "                                                'rz',\n",
      "                                                'sx',\n",
      "                                                'x',\n",
      "                                                'cx',\n",
      "                                                'reset',\n",
      "                                                'measure',\n",
      "                                                'delay']))\n"
     ]
    }
   ],
   "source": [
    "from pprint import pprint\n",
    "pprint(options)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0a8f4f24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choices: 'TwoQubitAmplifier' | 'CxAmplifier' | 'LocalFoldingAmplifier' | 'GlobalFoldingAmplifier'\n",
    "options.resilience.noise_amplifier = \"LocalFoldingAmplifier\"\n",
    "\n",
    "# Noise factors can be floats. The factors must be >= 1\n",
    "options.resilience.noise_factors = (1, 1.5, 2)\n",
    "\n",
    "# Choices: 'LinearExtrapolator' | 'QuadraticExtrapolator' | 'CubicExtrapolator' | 'QuarticExtrapolator'\n",
    "options.resilience.extrapolator = 'LinearExtrapolator'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "36c600f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mitigated expectation values (DD+ZNE): [-0.52806667]\n"
     ]
    }
   ],
   "source": [
    "res_mitigated = run_with_estimator_in_session(\n",
    "    circuits=qc,\n",
    "    observables=oper,\n",
    "    service=service,\n",
    "    params=init_params,\n",
    "    estimator_name=estimator_name,\n",
    "    options=options\n",
    ")\n",
    "print(f\"Mitigated expectation values (DD+ZNE): {res_mitigated.values}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0e46d297",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'zne': {'noise_amplification': {'noise_amplifier': \"<LocalFoldingAmplifier:{'gates_to_fold': None, 'noise_factor_relative_tolerance': 0.01, 'random_seed': None, 'sub_folding_option': 'from_first'}>\",\n",
       "   'noise_factors': [1, 1.5, 2],\n",
       "   'values': [-0.5812, -0.6136, -0.6360000000000001],\n",
       "   'variance': [1.9142868, 1.8416141599999998, 1.87203064],\n",
       "   'shots': [10000, 10000, 10000]},\n",
       "  'extrapolation': {'extrapolator': 'LinearExtrapolator'}}}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_mitigated.metadata[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eda3577e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numpy version 1.23.5\n",
      "qiskit runtime version 0.11.2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td><code>qiskit-terra</code></td><td>0.24.1</td></tr><tr><td><code>qiskit-aer</code></td><td>0.12.0</td></tr><tr><td><code>qiskit-ibmq-provider</code></td><td>0.20.2</td></tr><tr><td><code>qiskit</code></td><td>0.43.1</td></tr><tr><th>System information</th></tr><tr><td>Python version</td><td>3.10.11</td></tr><tr><td>Python compiler</td><td>MSC v.1934 64 bit (AMD64)</td></tr><tr><td>Python build</td><td>main, May 10 2023 18:51:25</td></tr><tr><td>OS</td><td>Windows</td></tr><tr><td>CPUs</td><td>8</td></tr><tr><td>Memory (Gb)</td><td>63.71001434326172</td></tr><tr><td colspan='2'>Sat Jul 15 20:13:41 2023 Eastern Daylight Time</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy\n",
    "print(f\"numpy version {numpy.__version__}\")\n",
    "\n",
    "import qiskit_ibm_runtime\n",
    "print(f\"qiskit runtime version {qiskit_ibm_runtime.version.get_version_info()}\")\n",
    "\n",
    "import qiskit.tools.jupyter\n",
    "%qiskit_version_table"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
