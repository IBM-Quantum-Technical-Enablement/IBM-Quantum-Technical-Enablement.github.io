{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e6284e2c",
   "metadata": {},
   "source": [
    "# Background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23392d31",
   "metadata": {},
   "source": [
    "There are several methods by which one can access IBM Quantum systems.  Each of these routines can be thought of as a software interface to quantum hardware."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ce3372",
   "metadata": {},
   "source": [
    "## `backend.run()`\n",
    "\n",
    " - The original method of access to IBM Quantum systems\n",
    " \n",
    " - Access via `qiskit-ibm-provider` package\n",
    " \n",
    " - Can be viewed as an open-source, vendor agnostic device driver\n",
    " \n",
    " - Provides direct access to sampling data from device with no pre- or post-processing\n",
    " \n",
    " - Ideal for users wanting to characterize / benchmark quantum systems, or looking to develop software such as error mitigation techniques\n",
    " \n",
    " - Requires users to possess comprehensive knowledge of hardware details to be successful"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2775f6",
   "metadata": {},
   "source": [
    "## Qiskit Runtime\n",
    "\n",
    "As quantum computing matures, and users further detached from device physics gain interest, it is important to abstract as much of the knowledge required for using `backend.run()` away from users, so that focus can be on building applications and algorithms.\n",
    "\n",
    "The **Qiskit Runtime** is a quantum device driver designed to abstract many details away from users, and give a high-fidelity managed user experience to those who prefer a more automated execution process.  Specifically, IBM Quantum knows many of the knobs that, to first-order, give best results and can be automatically set for users.  For these features, the options and code can be pushed into a cloud execution environment.\n",
    "\n",
    "The Qiskit Runtime provides:\n",
    "\n",
    "   - A simple interface that abstracts away hardware details, and removes the need for boilerplate code\n",
    "   \n",
    "   - Accessed through the `qiskit-ibm-runtime` package\n",
    "   \n",
    "   - By default, does a variety of pre- and post-processing steps (including error suppression and mitigation) that aim to improve returned results\n",
    "   \n",
    "   - Can be viewed as a closed-source, vendor specific device driver\n",
    "   \n",
    "   - Ideal for users at the level of algorithms and applications\n",
    "   \n",
    "   - Not as flexible as `backend.run()`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77c9588f",
   "metadata": {},
   "source": [
    "The Runtime consists of a collection of \"primitives\"; common quantum computational routines that are executed in a dockerized cloud environment.  The two primitives available to date are:\n",
    "\n",
    "| Primitive | What it does | Inputs | Outputs |\n",
    "| --- | --- | --- | --- |\n",
    "| **Sampler** | Samples circuit output distributions, possibly with error mitigation | Quantum circuits | Quasi-probability distributions |\n",
    "| **Estimator** | Computes expectation values for operators and states defined by circuits, possibly with error mitigation | Quantum circuits and operators | A list of expectation values (and error estimates) |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af496679",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "10c5d049",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit import *\n",
    "from qiskit.quantum_info import hellinger_fidelity\n",
    "\n",
    "# Operators from Qiskit\n",
    "from qiskit.quantum_info import SparsePauliOp\n",
    "\n",
    "# Runtime imports\n",
    "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler, Estimator, Session, Options\n",
    "\n",
    "\n",
    "# Plotting tools\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib_inline\n",
    "matplotlib_inline.backend_inline.set_matplotlib_formats('retina')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83ef1c55",
   "metadata": {},
   "source": [
    "# Setup: Test circuit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dfe26577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1165.66x618.722 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "image/png": {
       "height": 496,
       "width": 917
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def cntrl_hadamard_ladder(N, measurements=False):\n",
    "    qc = QuantumCircuit(N)\n",
    "\n",
    "    qc.x(range(N))\n",
    "    qc.h(range(N))\n",
    "\n",
    "    for kk in range(N // 2, 0, -1):\n",
    "        qc.ch(kk, kk - 1)\n",
    "    for kk in range(N // 2, N - 1):\n",
    "        qc.ch(kk, kk + 1)\n",
    "    if measurements:\n",
    "        qc.measure_all()\n",
    "    return qc\n",
    "\n",
    "N = 6\n",
    "qc = cntrl_hadamard_ladder(N, measurements=True)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "854835ce",
   "metadata": {},
   "source": [
    "# Qiskit Runtime *Sampler* Primitive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8fe6ac18",
   "metadata": {},
   "outputs": [],
   "source": [
    "instance = \"system-request/7-14-23-access/main\"\n",
    "service = QiskitRuntimeService(instance=instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "588effef",
   "metadata": {},
   "outputs": [],
   "source": [
    "service.backends();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b614bed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<IBMBackend('ibmq_qasm_simulator')>,\n",
       " <IBMBackend('simulator_stabilizer')>,\n",
       " <IBMBackend('simulator_extended_stabilizer')>,\n",
       " <IBMBackend('simulator_mps')>,\n",
       " <IBMBackend('simulator_statevector')>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "service.backends(simulator=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b45dd91b",
   "metadata": {},
   "outputs": [],
   "source": [
    "service.jobs();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "45e5dbe0",
   "metadata": {},
   "outputs": [],
   "source": [
    "service.jobs(backend_name=\"ibmq_qasm_simulator\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "37c93224",
   "metadata": {},
   "outputs": [],
   "source": [
    "backend = service.get_backend(\"ibmq_qasm_simulator\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5ee542a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampler = Sampler(backend=backend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "71372b2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "job = sampler.run(qc)\n",
    "job.job_id();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d4aad88e",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = job.result()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "79e416f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{1: 0.01625,\n",
       "  35: 0.029,\n",
       "  49: 0.0325,\n",
       "  32: 0.01475,\n",
       "  33: 0.01175,\n",
       "  63: 0.50025,\n",
       "  55: 0.1235,\n",
       "  51: 0.066,\n",
       "  48: 0.0345,\n",
       "  3: 0.03175,\n",
       "  7: 0.06425,\n",
       "  0: 0.0185,\n",
       "  39: 0.057}]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.quasi_dists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e2cdb2ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'shots': 4000}]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b2beb38",
   "metadata": {},
   "source": [
    "## Running inside a Session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "db71ef92",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_with_sampler_in_session(circuits, service, sampler_name, options=None):\n",
    "    \"\"\"Wrapper for running circuits with runtime Sampler inside a Session.\n",
    "    We will be re-using this construct a number of time. Therefore, it is warpped\n",
    "    insided a function for re-usability.\n",
    "    \"\"\"\n",
    "    with Session(service=service, backend=sampler_name) as session:\n",
    "        sampler = Sampler(session=session, options=options)\n",
    "        job = sampler.run(circuits)\n",
    "        result = job.result()\n",
    "\n",
    "    session.close()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4913174d",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "   <div>\n",
    "       <big><b>Note</b></big>\n",
    "   </div>\n",
    "   <br>\n",
    "    It is advised to close a session with explicit `session.close()` command after \"all\" jobs have finished.\n",
    "</div>"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "395f7374",
   "metadata": {},
   "source": [
    "![independent.png](imgs/independent.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e17910",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\">\n",
    "   <div>\n",
    "       <big><b>Danger</b></big>\n",
    "   </div>\n",
    "   <br>\n",
    "    If you close a session with unfinished jobs in it, then those jobs will be canceled!\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf26d017",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{33: 0.01425,\n",
       " 49: 0.02975,\n",
       " 32: 0.01975,\n",
       " 35: 0.03375,\n",
       " 1: 0.02,\n",
       " 63: 0.49725,\n",
       " 55: 0.126,\n",
       " 39: 0.064,\n",
       " 3: 0.03175,\n",
       " 0: 0.0135,\n",
       " 7: 0.0625,\n",
       " 51: 0.06075,\n",
       " 48: 0.02675}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampler_name = \"ibmq_qasm_simulator\"\n",
    "res = run_with_sampler_in_session(circuits=qc, service=service, sampler_name=sampler_name)\n",
    "ideal_dists = res.quasi_dists\n",
    "ideal_dists[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eea79f1",
   "metadata": {},
   "source": [
    "Unlike the usual `Counts` returned via `backend.run()`, the quasi-distribution states are given as integers rather than bit-strings, and the values are not discrete counts. This is because, as the number of qubits grows, the size of the bit-string keys grows much larger than the equivilent integer representation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1f4a2c1",
   "metadata": {},
   "source": [
    "Alternatively, one can work in bit-strings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8827d821",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'100001': 0.01425,\n",
       " '110001': 0.02975,\n",
       " '100000': 0.01975,\n",
       " '100011': 0.03375,\n",
       " '000001': 0.02,\n",
       " '111111': 0.49725,\n",
       " '110111': 0.126,\n",
       " '100111': 0.064,\n",
       " '000011': 0.03175,\n",
       " '000000': 0.0135,\n",
       " '000111': 0.0625,\n",
       " '110011': 0.06075,\n",
       " '110000': 0.02675}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ideal_dists[0].binary_probabilities()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "825514b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'shots': 4000}]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2eb1a88",
   "metadata": {},
   "source": [
    "## Configuring Options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1dcb52a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Options(optimization_level=None,\n",
      "        resilience_level=None,\n",
      "        max_execution_time=None,\n",
      "        transpilation=TranspilationOptions(skip_transpilation=False,\n",
      "                                           initial_layout=None,\n",
      "                                           layout_method=None,\n",
      "                                           routing_method=None,\n",
      "                                           approximation_degree=None),\n",
      "        resilience=ResilienceOptions(noise_amplifier='TwoQubitAmplifier',\n",
      "                                     noise_factors=(1, 3, 5),\n",
      "                                     extrapolator='LinearExtrapolator'),\n",
      "        execution=ExecutionOptions(shots=4000, init_qubits=True),\n",
      "        environment=EnvironmentOptions(log_level='WARNING',\n",
      "                                       callback=None,\n",
      "                                       job_tags=[]),\n",
      "        simulator=SimulatorOptions(noise_model=None,\n",
      "                                   seed_simulator=None,\n",
      "                                   coupling_map=None,\n",
      "                                   basis_gates=None))\n"
     ]
    }
   ],
   "source": [
    "options = Options()\n",
    "import pprint\n",
    "pprint.pprint(options)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9fd2135a",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.optimization_level = 0\n",
    "options.resilience_level = 0\n",
    "options.execution.shots = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8f8dbec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{32: 0.0142,\n",
       " 33: 0.0141,\n",
       " 35: 0.0309,\n",
       " 1: 0.0157,\n",
       " 63: 0.5044,\n",
       " 48: 0.0345,\n",
       " 51: 0.0624,\n",
       " 49: 0.0314,\n",
       " 55: 0.1224,\n",
       " 0: 0.0168,\n",
       " 39: 0.0591,\n",
       " 3: 0.0316,\n",
       " 7: 0.0625}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = run_with_sampler_in_session(\n",
    "    circuits=qc,\n",
    "    service=service,\n",
    "    sampler_name=sampler_name,\n",
    "    options=options\n",
    ")\n",
    "ideal_dists = res.quasi_dists\n",
    "ideal_dists[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c8d2d1c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'shots': 10000}]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fbd676d",
   "metadata": {},
   "source": [
    "## Running on real backend with Sampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "10458050",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.717647770744919"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampler_name = \"ibm_peekskill\"\n",
    "res_hw = run_with_sampler_in_session(\n",
    "    circuits=qc,\n",
    "    service=service,\n",
    "    sampler_name=sampler_name,\n",
    "    options=options\n",
    ")\n",
    "hw_dists = res_hw.quasi_dists\n",
    "fidelity = hellinger_fidelity(ideal_dists[0], hw_dists[0])\n",
    "fidelity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbdee6ff",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "   <div>\n",
    "       <big><b>Things to be careful of</b></big>\n",
    "   </div>\n",
    "   <br>\n",
    "    With the generalization to quasi-probability distributions some things that work for canonical probability distributions do not work when negative values are encountered.  One such example is computing the fidelity between two distributions.  For example, if the quasi-probability distribution has negative values then the fidelity calculation will fail due to the use of sqrts.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb313cd3",
   "metadata": {},
   "source": [
    "## Noisy Simulation with Runtime Sampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9b5222be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fetch a noise model from backend\n",
    "from qiskit_aer.noise import NoiseModel\n",
    "\n",
    "backend = service.get_backend(\"ibm_peekskill\")\n",
    "noise_model = NoiseModel.from_backend(backend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "06a08552",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.simulator.noise_model = noise_model\n",
    "options.simulator.basis_gates = backend.operation_names\n",
    "options.simulator.coupling_map = backend.coupling_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "068e1c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampler_name = \"ibmq_qasm_simulator\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d5460163",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8068802747212296"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_noisy = run_with_sampler_in_session(\n",
    "    circuits=qc,\n",
    "    service=service,\n",
    "    sampler_name=sampler_name,\n",
    "    options=options\n",
    ")\n",
    "noisy_dists = res_noisy.quasi_dists\n",
    "fidelity = hellinger_fidelity(ideal_dists[0], noisy_dists[0])\n",
    "fidelity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8d037213",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.simulator.set_backend(backend) # avaialble from qiskit-ibm-runtime 0.11.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9718b40b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8055267666194886"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_noisy = run_with_sampler_in_session(\n",
    "    circuits=qc,\n",
    "    service=service,\n",
    "    sampler_name=sampler_name,\n",
    "    options=options\n",
    ")\n",
    "noisy_dists = res_noisy.quasi_dists\n",
    "fidelity = hellinger_fidelity(ideal_dists[0], noisy_dists[0])\n",
    "fidelity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f428b0d",
   "metadata": {},
   "source": [
    "## Error Suppression and mitigation with Sampler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5bcbe46",
   "metadata": {},
   "source": [
    "Playing with `optimization_level` and `resilience_level` in `Options()`, we can activate different error suppression and mitigation methods in runtime."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7386c1aa",
   "metadata": {},
   "source": [
    "| Optimization Level | Sampler and Estimator |\n",
    "| --- | --- |\n",
    "| **Level 0** | No optimization and  no error suppression |\n",
    "| **Level 1** | Light optimization and Dynamical Decoupling | \n",
    "| **Level 2** | Medium optimization and Dynamical Decoupling | \n",
    "| **Level 3** | Heavy optimization and Dynamical Decoupling | "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc26311",
   "metadata": {},
   "source": [
    "| Resilience Levels | Sampler | Estimator |\n",
    "| --- | --- | --- |\n",
    "| **Level 0** | No mitigation | No mitigation | \n",
    "| **Level 1** (default) | M3 readout correction | TREX readout correction | \n",
    "| **Level 2** | No mitigation | ZNE (no readout correction) | \n",
    "| **Level 3** | No mitigation | PEC | "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1ed54105",
   "metadata": {},
   "outputs": [],
   "source": [
    "options.optimizationa_level = 3\n",
    "options.resilience_level = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d6bfa27b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8792062754351838"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_mitigated = run_with_sampler_in_session(\n",
    "    circuits=qc,\n",
    "    service=service,\n",
    "    sampler_name=sampler_name,\n",
    "    options=options\n",
    ")\n",
    "mitigated_dists = res_mitigated.quasi_dists\n",
    "fidelity = hellinger_fidelity(ideal_dists[0], mitigated_dists[0])\n",
    "fidelity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6af73863",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numpy version 1.23.5\n",
      "qiskit runtime version 0.11.2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td><code>qiskit-terra</code></td><td>0.24.1</td></tr><tr><td><code>qiskit-aer</code></td><td>0.12.0</td></tr><tr><td><code>qiskit-ibmq-provider</code></td><td>0.20.2</td></tr><tr><td><code>qiskit</code></td><td>0.43.1</td></tr><tr><th>System information</th></tr><tr><td>Python version</td><td>3.10.11</td></tr><tr><td>Python compiler</td><td>MSC v.1934 64 bit (AMD64)</td></tr><tr><td>Python build</td><td>main, May 10 2023 18:51:25</td></tr><tr><td>OS</td><td>Windows</td></tr><tr><td>CPUs</td><td>8</td></tr><tr><td>Memory (Gb)</td><td>63.71001434326172</td></tr><tr><td colspan='2'>Sat Jul 15 20:11:48 2023 Eastern Daylight Time</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy\n",
    "print(f\"numpy version {numpy.__version__}\")\n",
    "\n",
    "import qiskit_ibm_runtime\n",
    "print(f\"qiskit runtime version {qiskit_ibm_runtime.version.get_version_info()}\")\n",
    "\n",
    "import qiskit.tools.jupyter\n",
    "%qiskit_version_table"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
