{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7ea6ea8",
   "metadata": {},
   "source": [
    "# Generating Pauli-twirled circuits in Qiskit\n",
    "\n",
    "```{post} 2023-02-02\n",
    ":author: Paul Nation\n",
    ":category: Software\n",
    ":tags: Software, Error Suppression\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85c17835",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "Pauli-twirling is a quantum error suppression technique that uses randomization to noise shape coherent error into stochastic errors, by combining the results from many random, but logically equivalent circuits, together.  This is beneficial because while incoherent errors add up linearly with circuit depth, coherent errors can scale quadratically.  Here we will show how to generate Pauli-twirled circuits, where we focus on twirling two-qubit gates within a circuit.  This technique has been used, for example, in this work by Kim et al.: [arXiv:2108.09197](https://arxiv.org/abs/2108.09197).  We will show how to compute the possible Pauli sets for any two-qubit gate, and show how to create a Qiskit `Passmanager` that implements the routine, and can be combined with other transpilation techniques."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3589a64",
   "metadata": {},
   "source": [
    "## Frontmatter\n",
    "\n",
    "Here are all of the imports used in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7962a4e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from itertools import combinations\n",
    "\n",
    "from qiskit import *\n",
    "# Need gate classes for generating the Pauli twirling sets\n",
    "from qiskit.circuit.library import (IGate, XGate, YGate, ZGate,\n",
    "                                    CXGate, CZGate, ECRGate, iSwapGate)\n",
    "\n",
    "# Operator class\n",
    "from qiskit.quantum_info import Operator\n",
    "\n",
    "# Classes for building up a directed-acyclic graph (DAG) structure\n",
    "from qiskit.circuit import QuantumRegister\n",
    "from qiskit.dagcircuit import DAGCircuit\n",
    "# Transpiler stuff neded to make a pass and passmanager\n",
    "from qiskit.transpiler import PassManager\n",
    "from qiskit.transpiler.basepasses import TransformationPass\n",
    "from qiskit.transpiler.passes import Optimize1qGatesDecomposition\n",
    "\n",
    "# A fake system to transpile against\n",
    "from qiskit.providers.fake_provider import FakeHanoiV2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7271321",
   "metadata": {},
   "source": [
    "## Computing Pauli twirling gate sets\n",
    "\n",
    "As the name suggests, we are going to look at using single qubit Pauli operators to reshape the noise in our circuits.  Because the bulk of the error in a circuit resides with the two-qubit gates, here we focus on Pauli twirling two-qubit gates only.  \n",
    "\n",
    "We are looking for sets of 4 Pauli gates that when pre-pended and appended to a circuit containing a two-qubit gate, the unitary is equal to that of the single two-qubit gate alone.  This makes sense of course, as otherwise our circuit would not do what we want it to.  We now need to figure out which combinations of Pauli gates satisfies this requirement.  IBM Quantum systems have 3 different two-qubit entangling gates: CNOT, CZ, and ECR, and the corresponding Pauli combinations are obviously going to depend on which gate we are looking at.  Now for common gates like CNOT, one can find tables of Paulis in the literature.  However, for a gate like ECR, I am not sure such a table exists.  We could compute these by hand, but here we are going to be smarter and let the computer do all the work for us.\n",
    "\n",
    "First, let us generate some instances of the Pauli gates, as well as a collection of 2Q gates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1d190646",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Single qubit Pauli gates\n",
    "I = IGate()\n",
    "Z = ZGate()\n",
    "X = XGate()\n",
    "Y = YGate()\n",
    "\n",
    "# 2Q entangling gates\n",
    "CX = CXGate()\n",
    "CZ = CZGate()\n",
    "ECR = ECRGate()\n",
    "iSwap = iSwapGate()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "626da324",
   "metadata": {},
   "source": [
    "Now let us put the computer to work finding all possible combinations of Paulis that leave the action of a two-qubit gate unchanged, up to a phase factor.  Below we create a function that takes a Qiskit two-qubit gate as the input, and finds all the Pauli combinations by treating it as a 16 choose 4 problem, and letting Python generate all the possibilities.  If the unitary remains unchanged, then we add the combination of Paulis to the output list, along with a phase value of Zero.  However, if the unitaries differ by a phase factor of $\\pi$, we add a global phase of $\\pi$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1a8bb9ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_pauli_twirling_sets(two_qubit_gate):\n",
    "    \"\"\"Generate the Pauli twirling sets for a given 2Q gate\n",
    "    \n",
    "    Sets are ordered such that gate[0] and gate[1] are pre-roations\n",
    "    applied to control and target, respectively.  gate[2] and gate[3]\n",
    "    are post-rotations for control and target, respectively.\n",
    "    \n",
    "    Parameters:\n",
    "        two_qubit_gate (Gate): Input two-qubit gate\n",
    "        \n",
    "    Returns:\n",
    "        list: List of all twirling gate sets\n",
    "    \"\"\"\n",
    "    # Generate 16 element list of Pauli gates, each repeated 4 times\n",
    "    operator_list = [I, Z, X, Y]*4\n",
    "    # This is the target unitary to which our twirled circuit should match\n",
    "    target_unitary = Operator(two_qubit_gate.to_matrix())\n",
    "    twirling_sets = []\n",
    "    \n",
    "    # For every combination in 16 choose 4 make a circuit and look for equivilence\n",
    "    for gates in combinations(operator_list, 4):\n",
    "        # Build a circuit for our twirled 2Q gate\n",
    "        qc = QuantumCircuit(2)\n",
    "        qc.append(gates[0], [0])\n",
    "        qc.append(gates[1], [1])\n",
    "        qc.append(two_qubit_gate, [0, 1])\n",
    "        qc.append(gates[2], [0])\n",
    "        qc.append(gates[3], [1])\n",
    "        \n",
    "        norm = np.linalg.norm(Operator.from_circuit(qc)-target_unitary)\n",
    "        \n",
    "        phase = None\n",
    "        # If unitaries match we have a phase of zero\n",
    "        if abs(norm) < 1e-15:\n",
    "            phase = 0\n",
    "        # If unitaries differ by a phase of pi, shift by pi\n",
    "        elif abs(norm-4) < 1e-15:\n",
    "            phase = np.pi\n",
    "\n",
    "        if phase is not None:\n",
    "            qc.global_phase += phase\n",
    "            # Verify that our twirled circuit is a valid replacement\n",
    "            assert Operator.from_circuit(qc) == target_unitary\n",
    "            twirl_set = (gates, phase)\n",
    "            # Check that set does not already exist\n",
    "            if twirl_set not in twirling_sets:\n",
    "                twirling_sets.append(twirl_set)\n",
    "            \n",
    "    return twirling_sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb097140",
   "metadata": {},
   "source": [
    "With this function in hand, we are now in a position to generate the Pauli twirling sets for any two-qubit gate that Qiskit understands.  Here we generate the sets for each of the two-qubit gate instances above.  In preparation for using them later, we store the sets in a dictionary with the gate name as the key.  In practice you should do this once, and then cache / hard-code the results for fast retrieval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6d593787",
   "metadata": {},
   "outputs": [],
   "source": [
    "twirling_groups = {} \n",
    "\n",
    "for gate in [CX, CZ, ECR, iSwap]:\n",
    "    twirl_set = generate_pauli_twirling_sets(gate)\n",
    "    twirling_groups[gate.name] = twirl_set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ce872b6",
   "metadata": {},
   "source": [
    "For example, here is the set for the CNOT (CX) gate.  We see that two of the twirling sets have a non-zero phase factor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7467a3ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[((Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       "  3.141592653589793),\n",
       " ((Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       "  0),\n",
       " ((Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "   Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       "  3.141592653589793)]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirling_groups['cx']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a9196ff",
   "metadata": {},
   "source": [
    "## Twirling Qiskit circuits\n",
    "\n",
    "With our twirling sets in hand, we are now in a position to apply Pauli twirling to a given circuit.  Pauli twirling is a circuit transformation and thus is best utilized as a transpilation pass.  Below is a pass called `PauliTwirling` that performs twirling on a specific two-qubit gate, and utilizes the dictionary of twirling sets that we generated above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cdf24735",
   "metadata": {},
   "outputs": [],
   "source": [
    "class PauliTwirling(TransformationPass):\n",
    "    \"\"\"Pauli twirl an input circuit.\n",
    "    \"\"\"\n",
    "    def __init__(self, twirling_gate, seed=None):\n",
    "        \"\"\"\n",
    "        Parameters:\n",
    "            twirling_gate (str): Which gate to twirl\n",
    "            seed (int): Seed for RNG, should be < 2e32\n",
    "        \"\"\"\n",
    "        super().__init__()\n",
    "        # This is the target gate to twirl\n",
    "        self.twirling_gate = twirling_gate\n",
    "        # Get the twirling set from the dict we generated above\n",
    "        # This should be repalced by a cached version in practice\n",
    "        self.twirling_set = twirling_groups[twirling_gate]\n",
    "        # Length of the twirling set to bound RNG generation\n",
    "        self.twirling_len = len(self.twirling_set)\n",
    "        # Seed the NumPy RNG\n",
    "        self.rng = np.random.default_rng(seed)\n",
    "\n",
    "    def run(self, dag):\n",
    "        \"\"\"Insert Pauli twirls into input DAG\n",
    "        \n",
    "        Parameters:\n",
    "            dag (DAGCircuit): Input DAG\n",
    "        \n",
    "        Returns:\n",
    "            dag: DAG with twirls added in-place\n",
    "        \"\"\"\n",
    "        for run in dag.collect_runs([self.twirling_gate]):\n",
    "            for node in run:\n",
    "                # Generate a random int to specify the twirling gates\n",
    "                twirl_idx = self.rng.integers(0, self.twirling_len)\n",
    "                # Get the randomly selected twirling set\n",
    "                twirl_gates = self.twirling_set[twirl_idx][0]\n",
    "                twirl_phase = self.twirling_set[twirl_idx][1]\n",
    "                # Make a small DAG for the twirled circuit we are going to insert\n",
    "                twirl_dag = DAGCircuit()\n",
    "                # Add a register of qubits (here always 2Q)\n",
    "                qreg = QuantumRegister(2)\n",
    "                twirl_dag.add_qreg(qreg)\n",
    "                # gate[0] pre-applied to control\n",
    "                twirl_dag.apply_operation_back(twirl_gates[0], [qreg[0]])\n",
    "                # gate[1] pre-applied to target\n",
    "                twirl_dag.apply_operation_back(twirl_gates[1], [qreg[1]])\n",
    "                # Insert original gate\n",
    "                twirl_dag.apply_operation_back(node.op, [qreg[0], qreg[1]])\n",
    "                # gate[2] pre-applied to control\n",
    "                twirl_dag.apply_operation_back(twirl_gates[2], [qreg[0]])\n",
    "                # gate[3] pre-applied to target\n",
    "                twirl_dag.apply_operation_back(twirl_gates[3], [qreg[1]])\n",
    "                # Add a global phase gate to account for possible phase difference\n",
    "                twirl_dag.global_phase += twirl_phase\n",
    "                # Replace the target gate with the twirled version\n",
    "                dag.substitute_node_with_dag(node, twirl_dag)\n",
    "        return dag"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3587d1",
   "metadata": {},
   "source": [
    "Let us test our pass on a small circuit, here a GHZ circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "31312223",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 371.107x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(3)\n",
    "qc.h(1)\n",
    "qc.cx(1,0)\n",
    "qc.cx(1,2)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bce127d4",
   "metadata": {},
   "source": [
    "In order to use the pass, we must attach it to a `PassManager`.  Here we do that, and tell our `PauliTwirling` pass to twirl `cx` gates, and we see the pass for reproducibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63c6723b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pm = PassManager([PauliTwirling('cx', seed=54321)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aea2cde7",
   "metadata": {},
   "source": [
    "Calling `pm.run` once will generate the following circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "651acc4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirl_qc = pm.run(qc)\n",
    "twirl_qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b61d703",
   "metadata": {},
   "source": [
    "Calling it again, will yield another:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e67c53ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirl_qc2 = pm.run(qc)\n",
    "twirl_qc2.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58a3b819",
   "metadata": {},
   "source": [
    "We can see that our routine is working as expected, and we are able to generate new circuits that have been randomly twirled.  In practice, the goal is to create a sizable collection of these circuits for execution on a real quantum system. Let us explicitly verify that the Unitary operations are unchanged after twirling:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c7461ae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "assert Operator.from_circuit(twirl_qc) == Operator.from_circuit(qc)\n",
    "assert Operator.from_circuit(twirl_qc2) == Operator.from_circuit(qc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "887a8a9d",
   "metadata": {},
   "source": [
    "### Use cases\n",
    "\n",
    "There are a couple of ways that our new pass can be used.  First, if the input circuit was generated using the same two-qubit gate (and no 3+ qubit gates) as the target processor supports, then we can twirl before passing to the Qiskit transpiler:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "753f9914",
   "metadata": {},
   "source": [
    "Let's pick a target backend (here a version 2 backend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "83d64d06",
   "metadata": {},
   "outputs": [],
   "source": [
    "backend = FakeHanoiV2()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f37445a",
   "metadata": {},
   "source": [
    "Now we transpile our pre-twirled circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "855f6b96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 841.845x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans_twirl_qc = transpile(twirl_qc, backend)\n",
    "trans_twirl_qc.draw('mpl', idle_wires=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54f029e1",
   "metadata": {},
   "source": [
    "We are left with a new circuit that is compiled and mapped, ready to be sent to the machine.\n",
    "\n",
    "However, more often than not, a circuit is written using whatever gates are most convenient, e.g. 3+ qubit gates, non-basis gates, etc.  When the gates do not match the two-qubit basis gate of the system, we need to transpile first, and then twirl.  However, when doing so, we are left with a circuit that can be further optimized in terms of the one-qubit gates.  As such, we construct as new `Passmanager` that does the Pauli twirling, and then performs single-qubit gate optimization.  There is also the possibility that this single-qubit gate optimization might result in fortuitous cancellations where we might be able to remove some two-qubit gates.  However, we do not address that here as it would make the `PassManager` a bit more complex, and out of scope for this demo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a882cd7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "post_pm = PassManager([PauliTwirling('cx', seed=54321), \n",
    "                       Optimize1qGatesDecomposition(backend.target.operation_names)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccb72459",
   "metadata": {},
   "source": [
    "Here we transpile first:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "006b250f",
   "metadata": {},
   "outputs": [],
   "source": [
    "trans_qc = transpile(qc, backend)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb5d9d25",
   "metadata": {},
   "source": [
    "And now apply our new `PassManager` post-transpilation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c138b47d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_twirl_qc = post_pm.run(trans_qc)\n",
    "post_twirl_qc.draw('mpl', idle_wires=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb16f44c",
   "metadata": {},
   "source": [
    "## Where to go from here\n",
    "\n",
    "You now have all that you need to try out Pauli twirling.  First, generate a collection of twirled circuits, and execute each on hardware, collecting the results together at the end since one is executing many circuits that perform the same unitary.  When twirling, the number of shots per circuit is usually reduced.  That is to say that, if before you ran one circuit 10000 times, then you can try executing 10 twirled circuits with 1000 shots each, or 100 circuits at 100 shots, etc.  Keep in mind that the IBM Quantum infrastructure is optimized for many shots per circuit, and therefore it will take longer to run more circuits at fewer shots.  But, if you want to try to improve your results,  it might be a trade-off worth making."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8dde6772",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
