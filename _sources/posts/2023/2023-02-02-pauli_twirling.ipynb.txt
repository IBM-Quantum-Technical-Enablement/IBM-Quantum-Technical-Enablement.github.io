{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7ea6ea8",
   "metadata": {},
   "source": [
    "# Generating Pauli-twirled circuits in Qiskit\n",
    "\n",
    "```{post} 2023-02-02\n",
    ":author: Paul Nation\n",
    ":category: Software\n",
    ":tags: Software, Error Suppression\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85c17835",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "Pauli-twirling is a quantum error suppression technique that uses randomization to noise shape coherent error into stochastic errors, by combining the results from many random, but logically equivalent circuits, together.  This is beneficial because while incoherent errors add up linearly with circuit depth, coherent errors can scale quadratically.  Here we will show how to generate Pauli-twirled circuits, where we focus on twirling two-qubit gates within a circuit.  This technique has been used, for example, in this work by Kim et al.: [arXiv:2108.09197](https://arxiv.org/abs/2108.09197).  We will show how to compute the possible Pauli sets for any two-qubit gate, and show how to create a Qiskit `Passmanager` that implements the routine, and can be combined with other transpilation techniques."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3589a64",
   "metadata": {},
   "source": [
    "## Frontmatter\n",
    "\n",
    "Here are all of the imports used in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "7962a4e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from itertools import combinations\n",
    "\n",
    "from qiskit import *\n",
    "# Need gate classes for generating the Pauli twirling sets\n",
    "from qiskit.circuit.library import (IGate, XGate, YGate, ZGate,\n",
    "                                    CXGate, CZGate, ECRGate, iSwapGate)\n",
    "\n",
    "# Classes for building up a directed-acyclic graph (DAG) structure\n",
    "from qiskit.circuit import QuantumRegister\n",
    "from qiskit.dagcircuit import DAGCircuit\n",
    "# Transpiler stuff neded to make a pass and passmanager\n",
    "from qiskit.transpiler import PassManager\n",
    "from qiskit.transpiler.basepasses import TransformationPass\n",
    "from qiskit.transpiler.passes import Optimize1qGatesDecomposition\n",
    "\n",
    "# A fake system to transpile against\n",
    "from qiskit.providers.fake_provider import FakeHanoiV2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7271321",
   "metadata": {},
   "source": [
    "## Computing Pauli twirling gate sets\n",
    "\n",
    "As the name suggests, we are going to look at using single qubit Pauli operators to reshape the noise in our circuits.  Because the bulk of the error in a circuit resides with the two-qubit gates, here we focus on Pauli twirling two-qubit gates only.  \n",
    "\n",
    "We are looking for sets of 4 Pauli gates that when pre-pended and appended to a circuit containing a two-qubit gate, the unitary is equal to that of the single two-qubit gate alone.  This makes sense of course, as otherwise our circuit would not do what we want it to.  We now need to figure out which combinations of Pauli gates satisfies this requirement.  IBM Quantum systems have 3 different two-qubit entangling gates: CNOT, CZ, and ECR, and the corresponding Pauli combinations are obviously going to depend on which gate we are looking at.  Now for common gates like CNOT, one can find tables of Paulis in the literature.  However, for a gate like ECR, I am not sure such a table exists.  We could compute these by hand, but here we are going to be smarter and let the computer do all the work for us.\n",
    "\n",
    "First, let us generate some instances of the Pauli gates, as well as a collection of 2Q gates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "1d190646",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Single qubit Pauli gates\n",
    "I = IGate()\n",
    "Z = ZGate()\n",
    "X = XGate()\n",
    "Y = YGate()\n",
    "\n",
    "# 2Q entangling gates\n",
    "CX = CXGate()\n",
    "CZ = CZGate()\n",
    "ECR = ECRGate()\n",
    "iSwap = iSwapGate()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "626da324",
   "metadata": {},
   "source": [
    "Now let us put the computer to work finding all possible combinations of Paulis that leave the action of a two-qubit gate unchanged.  Below we create a function that takes a Qiskit two-qubit gate as the input, and finds all the Pauli combinations by treating it as a 16 choose 4 problem, and letting Python generate all the possibilities.  If the unitary remains unchanged, then we add the combination of Paulis to the output list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "1a8bb9ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_pauli_twirling_sets(two_qubit_gate):\n",
    "    \"\"\"Generate the Pauli twirling sets for a given 2Q gate\n",
    "    \n",
    "    Sets are ordered such that gate[0] and gate[1] are pre-roations\n",
    "    applied to control and target, respectively.  gate[2] and gate[3]\n",
    "    are post-rotations for control and target, respectively.\n",
    "    \n",
    "    Parameters:\n",
    "        two_qubit_gate (Gate): Input two-qubit gate\n",
    "        \n",
    "    Returns:\n",
    "        list: List of all twirling gate sets\n",
    "    \"\"\"\n",
    "    # Generate 16 element list of Pauli gates, each repeated 4 times\n",
    "    operator_list = [I, Z, X, Y]*4\n",
    "    # This is the target unitary to which our twirled circuit should match\n",
    "    target_unitary = Operator(two_qubit_gate.to_matrix())\n",
    "    twirling_sets = []\n",
    "    \n",
    "    # For every combination in 16 choose 4 make a circuit and look for equivilence\n",
    "    for gates in combinations(operator_list, 4):\n",
    "        # Build a circuit for our twirled 2Q gate\n",
    "        qc = QuantumCircuit(2)\n",
    "        qc.append(gates[0], [0])\n",
    "        qc.append(gates[1], [1])\n",
    "        qc.append(two_qubit_gate, [0, 1])\n",
    "        qc.append(gates[2], [0])\n",
    "        qc.append(gates[3], [1])\n",
    "        # If unitaries match, we have found a set\n",
    "        if Operator.from_circuit(qc) == target_unitary:\n",
    "            # There are some repeats so check for those\n",
    "            if gates not in twirling_sets:\n",
    "                twirling_sets.append(gates)\n",
    "    return twirling_sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb097140",
   "metadata": {},
   "source": [
    "With this function in hand, we are now in a position to generate the Pauli twirling sets for any two-qubit gate that Qiskit understands.  Here we generate the sets for each of the two-qubit gate instances above.  In preparation for using them later, we store the sets in a dictionary with the gate name as the key.  In practice you should do this once, and then cache / hard-code the results for fast retrieval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "6d593787",
   "metadata": {},
   "outputs": [],
   "source": [
    "twirling_groups = {} \n",
    "\n",
    "for gate in [CX, CZ, ECR, iSwap]:\n",
    "    twirl_set = generate_pauli_twirling_sets(gate)\n",
    "    twirling_groups[gate.name] = twirl_set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ce872b6",
   "metadata": {},
   "source": [
    "For example, here is the set for the CNOT (CX) gate:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "7467a3ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='z', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[])),\n",
       " (Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='x', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='y', num_qubits=1, num_clbits=0, params=[]),\n",
       "  Instruction(name='id', num_qubits=1, num_clbits=0, params=[]))]"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirling_groups['cx']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a9196ff",
   "metadata": {},
   "source": [
    "## Twirling Qiskit circuits\n",
    "\n",
    "With our twirling sets in hand, we are now in a position to apply Pauli twirling to a given circuit.  Pauli twirling is a circuit transformation and thus is best utilized as a transpilation pass.  Below is a pass called `PauliTwirling` that performs twirling on a specific two-qubit gate, and utilizes the dictionary of twirling sets that we generated above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "cdf24735",
   "metadata": {},
   "outputs": [],
   "source": [
    "class PauliTwirling(TransformationPass):\n",
    "    \"\"\"Pauli twirl an input circuit.\n",
    "    \"\"\"\n",
    "    def __init__(self, twirling_gate, seed=None):\n",
    "        \"\"\"\n",
    "        Parameters:\n",
    "            twirling_gate (str): Which gate to twirl\n",
    "            seed (int): Seed for RNG, should be < 2e32\n",
    "        \"\"\"\n",
    "        super().__init__()\n",
    "        # This is the target gate to twirl\n",
    "        self.twirling_gate = twirling_gate\n",
    "        # Get the twirling set from the dict we generated above\n",
    "        # This should be repalced by a cached version in practice\n",
    "        self.twirling_set = twirling_groups[twirling_gate]\n",
    "        # Length of the twirling set to bound RNG generation\n",
    "        self.twirling_len = len(self.twirling_set)\n",
    "        # Seed the NumPy RNG\n",
    "        self.rng = np.random.default_rng(seed)\n",
    "\n",
    "    def run(self, dag):\n",
    "        \"\"\"Insert Pauli twirls into input DAG\n",
    "        \n",
    "        Parameters:\n",
    "            dag (DAGCircuit): Input DAG\n",
    "        \n",
    "        Returns:\n",
    "            dag: DAG with twirls added in-place\n",
    "        \"\"\"\n",
    "        for run in dag.collect_runs([self.twirling_gate]):\n",
    "            for node in run:\n",
    "                # Generate a random int to specify the twirling gates\n",
    "                twirl_idx = self.rng.integers(0, self.twirling_len)\n",
    "                # Get the randomly selected twirling set\n",
    "                twirl_gates = self.twirling_set[twirl_idx]\n",
    "                # Make a small DAG for the twirled circuit we are going to insert\n",
    "                twirl_dag = DAGCircuit()\n",
    "                # Add a register of qubits (here always 2Q)\n",
    "                qreg = QuantumRegister(2)\n",
    "                twirl_dag.add_qreg(qreg)\n",
    "                # gate[0] pre-applied to control\n",
    "                twirl_dag.apply_operation_back(twirl_gates[0], [qreg[0]])\n",
    "                # gate[1] pre-applied to target\n",
    "                twirl_dag.apply_operation_back(twirl_gates[1], [qreg[1]])\n",
    "                # Insert original gate\n",
    "                twirl_dag.apply_operation_back(node.op, [qreg[0], qreg[1]])\n",
    "                # gate[2] pre-applied to control\n",
    "                twirl_dag.apply_operation_back(twirl_gates[2], [qreg[0]])\n",
    "                # gate[3] pre-applied to target\n",
    "                twirl_dag.apply_operation_back(twirl_gates[3], [qreg[1]])\n",
    "                # Replace the target gate with the twirled version\n",
    "                dag.substitute_node_with_dag(node, twirl_dag)\n",
    "        return dag\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3587d1",
   "metadata": {},
   "source": [
    "Let us test our pass on a small circuit, here a GHZ circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "31312223",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 371.107x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 375,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(3)\n",
    "qc.h(1)\n",
    "qc.cx(1,0)\n",
    "qc.cx(1,2)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bce127d4",
   "metadata": {},
   "source": [
    "In order to use the pass, we must attach it to a `PassManager`.  Here we do that, and tell our `PauliTwirling` pass to twirl `cx` gates, and we see the pass for reproducibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "id": "63c6723b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pm = PassManager([PauliTwirling('cx', seed=54321)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aea2cde7",
   "metadata": {},
   "source": [
    "Calling `pm.run` once will generate the following circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "id": "651acc4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirl_qc = pm.run([qc])\n",
    "twirl_qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b61d703",
   "metadata": {},
   "source": [
    "Calling it again, will yield another:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "e67c53ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.552x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "twirl_qc2 = pm.run([qc])\n",
    "twirl_qc2.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58a3b819",
   "metadata": {},
   "source": [
    "We can see that our routine is working as expected, and we are able to generate new circuits that have been randomly twirled.  In practice, the goal is to create a sizable collection of these circuits for execution on a real quantum system. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "887a8a9d",
   "metadata": {},
   "source": [
    "### Use cases\n",
    "\n",
    "There are a couple of ways that our new pass can be used.  First, if the input circuit was generated using the same two-qubit gate (and no 3+ qubit gates) as the target processor supports, then we can twirl before passing to the Qiskit transpiler:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "753f9914",
   "metadata": {},
   "source": [
    "Let's pick a target backend (here a version 2 backend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "id": "83d64d06",
   "metadata": {},
   "outputs": [],
   "source": [
    "backend = FakeHanoiV2()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f37445a",
   "metadata": {},
   "source": [
    "Now we transpile our pre-twirled circuit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "855f6b96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 841.845x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans_twirl_qc = transpile(twirl_qc, backend)\n",
    "trans_twirl_qc.draw('mpl', idle_wires=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54f029e1",
   "metadata": {},
   "source": [
    "We are left with a new circuit that is compiled and mapped, ready to be sent to the machine.\n",
    "\n",
    "However, more often than not, a circuit is written using whatever gates are most convenient, e.g. 3+ qubit gates, non-basis gates, etc.  When the gates do not match the two-qubit basis gate of the system, we need to transpile first, and then twirl.  However, when doing so, we are left with a circuit that can be further optimized in terms of the one-qubit gates.  As such, we construct as new `Passmanager` that does the Pauli twirling, and then performs single-qubit gate optimization.  There is also the possibility that this single-qubit gate optimization might result in fortuitous cancellations where we might be able to remove some two-qubit gates.  However, we do not address that here as it would make the `PassManager` a bit more complex, and out of scope for this demo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "a882cd7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "post_pm = PassManager([PauliTwirling('cx', seed=54321), \n",
    "                       Optimize1qGatesDecomposition(backend.target.operation_names)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccb72459",
   "metadata": {},
   "source": [
    "Here we transpile first:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "id": "006b250f",
   "metadata": {},
   "outputs": [],
   "source": [
    "trans_qc = transpile(qc, backend)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb5d9d25",
   "metadata": {},
   "source": [
    "And now apply our new `PassManager` post-transpilation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "id": "c138b47d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 789.163x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_twirl_qc = post_pm.run([trans_qc])\n",
    "post_twirl_qc.draw('mpl', idle_wires=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb16f44c",
   "metadata": {},
   "source": [
    "## Where to go from here\n",
    "\n",
    "You now have all that you need to try out Pauli twirling.  First, generate a collection of twirled circuits, and execute each on hardware, collecting the results together at the end since one is executing many circuits that perform the same unitary.  When twirling, the number of shots per circuit is usually reduced.  That is to say that, if before you ran one circuit 10000 times, then you can try executing 10 twirled circuits with 1000 shots each, or 100 circuits at 100 shots, etc.  Keep in mind that the IBM Quantum infrastructure is optimized for many shots per circuit, and therefore it will take longer to run more circuits at fewer shots.  But, if you want to try to improve your results,  it might be a trade-off worth making."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8dde6772",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
