{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "239f01d1",
   "metadata": {},
   "source": [
    "# How to make your backend a directed backend\n",
    "\n",
    "```{post} 2023-01-28\n",
    ":author: Paul Nation\n",
    ":category: Hardware\n",
    ":tags: hardware\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f216de4f",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "Here we show the reader how to construct a directed IBM Quantum backend from an undirected one.  This yields some performance benefits as the Qiskit transpiler can better optimize single-qubit gates within the circuit."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a49bc511",
   "metadata": {},
   "source": [
    "# Frontmatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "748fe751",
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "\n",
    "from qiskit import *\n",
    "from qiskit.providers import BackendV1, BackendV2\n",
    "from qiskit.providers.fake_provider import FakeAthens, FakeAthensV2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368e39df",
   "metadata": {},
   "source": [
    "## Background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "494c3e95",
   "metadata": {},
   "source": [
    "Recently IBM Quantum announced its new [Sherbrooke device](https://research.ibm.com/blog/eagle-quantum-error-mitigation) that allows users to directly work with cross-resonance gates, and exposes only the natural direction that the gates operate in.  CNOT gates, which are comprised of cross-resonance gates on IBM Quantum systems, also have a natural direction, but current devices that use CNOT gates as their two-qubit basis gate do not directly express this directionality.  Indeed, the coupling map (topology) for these systems is symmetric / bi-directional; if you query the system you will see that it indicates that a backend can do a CNOT gate between qubits A & B (control and target), as well as B & A.  If a CX gate that is used in a circuit is not in the natural direction, the system will transparently flip it around in software and execute the circuit.  This comes with a cost however.  To see this, lets make a Bell state in the usual fashion (ignoring measurements for brevity):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "572a0369",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 287.294x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(2)\n",
    "qc.h(0)\n",
    "qc.cx(0, 1)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83143ba3",
   "metadata": {},
   "source": [
    "If the background reports a symmetric coupling map, then this circuit will execute as is, with any differences in gate directionality handled internally.  Now suppose that the system we are targeting has a natural gate direction between qubits 0 and 1 that is in the opposite direction; The control must be qubit 1 and the target qubit 0.  What does the circuit being executed look like.  We can use the Qiskit transpiler to mimic this using the coupling map `coupling_map= [[1, 0]]` and setting `optimization_level=0` since no optimization occurs down at the system level:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "765d0b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 506.997x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trans_qc = transpile(qc, coupling_map=[[1,0]], optimization_level=0)\n",
    "trans_qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c29fd0af",
   "metadata": {},
   "source": [
    "One can immediately see from the figure above that the resulting circuit is less than optimized.  Indeed, it is already clear that we are missing the opportunity to collapse the two Hadamards into the identity.  If this circuit were embedded in a larger one, then the additional Hadamard gates could likely be combined with other single-qubit gates and optimized.  Thus if we expose the natural CNOT gate directions to Qiskit, we can gain some additional performance improvements. Even though single-qubit gate errors are ~100x lower than those of CNOT gates on IBM Quantum hardware, the savings can add up in larger circuits. \n",
    "\n",
    "Below we will see how to turn any IBM Quantum backend that uses CNOT gates into a directed version using only the natural gate directions, allowing anyone to take advantage of the resulting performance improvements."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd6a7038",
   "metadata": {},
   "source": [
    "## Convering a backend to a directed one\n",
    "\n",
    "If an IBM Quantum system returns a symmetric coupling map, how in the world are we going to figure out the natural gate directions?  It turns out that it is all in the timing information.  A CNOT gate in the natural direction has a set duration.  A CNOT gate in the opposite direction has a timing that is the sum of the natural direction time PLUS the time it takes to do the single qubit gates needed to reverse the direction.  So if we compare the CNOT gate time from A -> B and B -> A (control -> target), whichever time is lower is the natural direction.  We can then reduce the coupling map down to just this set of natural gate directions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8d1cc92",
   "metadata": {},
   "source": [
    "At the time of writing, Qiskit and IBM Quantum are transitioning to a new version of the backend class structure called `BackendV2`.  However, `BackendV1` is still very much around, and we will make a function that converts both types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9cce95d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_directed_cx_backend(backend):\n",
    "    \"\"\"Generate a directed CX gate backend.\n",
    "    \n",
    "    This yields a backend that allows CX gates only in their natural direction.\n",
    "    This should yield somewhat better results as the transpiler can optimize\n",
    "    a bit further.\n",
    "    \n",
    "    Parameters:\n",
    "        backend (BackendV1 or BackendV2): Input backend\n",
    "        \n",
    "    Returns:\n",
    "        BackendV1 or BackendV2: Directed version of input backend\n",
    "        \n",
    "    Raises:\n",
    "        ValueError: Backend must use cx gates\n",
    "    \"\"\"\n",
    "    \n",
    "    # Make a copy of the backend so as to not mess up the original\n",
    "    directed_backend = copy.deepcopy(backend)\n",
    "    \n",
    "    # Backend V1\n",
    "    if isinstance(backend, BackendV1):\n",
    "        if 'cx' not in backend.configuration().basis_gates:\n",
    "            raise ValueError('Backend must use CX gates')\n",
    "        # Grab coupling map and properties\n",
    "        cmap = backend.configuration().coupling_map\n",
    "        props = directed_backend.properties()\n",
    "        # Make a dict of all the cx times\n",
    "        cx_times = {}\n",
    "        for edge in cmap:\n",
    "            cx_times[tuple(edge)] = props.gate_length('cx', edge)\n",
    "        # Make new directed coupling map\n",
    "        directed_cmap = []\n",
    "        for edge in cx_times.keys():\n",
    "            if cx_times[edge] < cx_times[edge[::-1]]:\n",
    "                directed_cmap.append(list(edge))\n",
    "        \n",
    "        # Add directed version of coupling map\n",
    "        directed_backend._configuration.coupling_map = directed_cmap\n",
    "        \n",
    "        #Remove unused cx gates from properties\n",
    "        dir_props = directed_backend._properties\n",
    "        for gate in dir_props.gates:\n",
    "            if len(gate.qubits) == 2:\n",
    "                if gate.qubits not in directed_cmap:\n",
    "                    dir_props.gates.remove(gate)\n",
    "    \n",
    "    # Backend V2\n",
    "    elif isinstance(backend, BackendV2):\n",
    "        if 'cx' not in directed_backend.target.operation_names:\n",
    "            raise ValueError('Backend must use CX gates')\n",
    "        # Get coupling map\n",
    "        cmap = backend.coupling_map.get_edges()\n",
    "        # Get all cx gates\n",
    "        cx_gates = backend.target['cx']\n",
    "        # Generate directed coupling map\n",
    "        directed_cmap = []\n",
    "        for edge in cmap:\n",
    "            if cx_gates[edge].duration < cx_gates[edge[::-1]].duration:\n",
    "                directed_cmap.append(edge)\n",
    "        # Generate dict of directed cx edges only\n",
    "        cx_dict = {}\n",
    "        for edge, gate in directed_backend.target._gate_map['cx'].items():\n",
    "            if edge in directed_cmap:\n",
    "                cx_dict[edge] = gate\n",
    "        # Replace gate map with the directed gates only\n",
    "        directed_backend.target._gate_map['cx'] = cx_dict\n",
    "        # Need to reset intenal _coupling_graph otherwise will not rebuild\n",
    "        directed_backend.target._coupling_graph = None\n",
    "\n",
    "    return  directed_backend"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90a62e20",
   "metadata": {},
   "source": [
    "To see how this function works, let us create an instance of a fake backend of both V1 and V2 varieties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e7c9dba",
   "metadata": {},
   "outputs": [],
   "source": [
    "backend1 = FakeAthens()\n",
    "backend2 = FakeAthensV2()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebf63853",
   "metadata": {},
   "source": [
    "For `BackendV1` we can see the coupling map from the configuration information:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca61e4e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0, 1], [1, 0], [1, 2], [2, 1], [2, 3], [3, 2], [3, 4], [4, 3]]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "backend1.configuration().coupling_map"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fec3eece",
   "metadata": {},
   "source": [
    "`BackendV2` has the coupling map at the top of the class structure.  The coupling map does not have a `__repr__` so we need to print it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1cea0a03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[4, 3], [3, 4], [2, 3], [3, 2], [1, 2], [2, 1], [1, 0], [0, 1]]\n"
     ]
    }
   ],
   "source": [
    "print(backend2.coupling_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f787e3f",
   "metadata": {},
   "source": [
    "Regardless of version, you can see that for every entry in these lists, the reverse is also present; the coupling map is symmetric.  Lets see what our function gives us:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8e8dfe11",
   "metadata": {},
   "outputs": [],
   "source": [
    "directed_backend1 = make_directed_cx_backend(backend1)\n",
    "directed_backend2 = make_directed_cx_backend(backend2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c3c1434d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 0], [1, 2], [2, 3], [4, 3]]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directed_backend1.configuration().coupling_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1ff2df5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[4, 3], [2, 3], [1, 2], [1, 0]]\n"
     ]
    }
   ],
   "source": [
    "print(directed_backend2.coupling_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ba04433",
   "metadata": {},
   "source": [
    "We see that the coupling maps are no longer symmetric, and are indicating only the natural direction of the CNOT gates.\n",
    "\n",
    "We can now use these in the transpiler, and reap the rewards:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bac12fdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 834.349x451.5 with 1 Axes>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directed_trans_qc = transpile(qc, directed_backend2)\n",
    "directed_trans_qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa4ba197",
   "metadata": {},
   "source": [
    "As expected, the transpiler can now optimize away the single-qubit gates that are added when reversing CNOT gate directions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf2c65e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
