{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8769a901",
   "metadata": {},
   "source": [
    "# Comparison of Falcon R5 processors verse R4 \n",
    "\n",
    "```{post} 2021-11-28\n",
    ":author: Paul Nation\n",
    ":tags: Falcon\n",
    ":category: Hardware\n",
    "```\n",
    "\n",
    "Recently IBM Quantum announced the move to revision 5 (R5) of its Falcon processors [see this tweet from Jay Gambetta](https://twitter.com/jaygambetta/status/1460697559773634570).  In particular it was highlighted that there is a 8x reduction in meausrement time on these systems.  Lets see if this, or any other enhancements, are visible from the system calibration data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98cb47a5",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "The highlight of the recently released Falcon R5 \"core\" systems is their much improved measurement times (7x) and error rates (2x).  On these systems a measurement is roughly twice as long as a CNOT gate, compared to 13x on the old R4 systems, and allows for implimenting high-fidelity dynamic circuits with resets, mid-circuit measurements, and eventually classically-conditioned gates.  For other tasks, the modest improvements in the CNOT gate errors and $T_{1}$ times are also welcomed.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4305b6d",
   "metadata": {},
   "source": [
    "## Frontmatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "257eacd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "424f0b9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('nonhermitian')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef8832cf",
   "metadata": {},
   "source": [
    "## Load account and backend selection\n",
    "\n",
    "Loading account and making two lists; one for R5 backends and the other for R4.  Which is which can be found on the [systems page](https://quantum-computing.ibm.com/services?services=systems)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32bbe044",
   "metadata": {},
   "outputs": [],
   "source": [
    "IBMQ.load_account();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5bfa0e2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "provider = IBMQ.get_provider(project='internal-test')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "97b44470",
   "metadata": {},
   "outputs": [],
   "source": [
    "r5_backends = ['ibmq_kolkata', 'ibm_hanoi', 'ibm_kawasaki', 'ibm_cairo', 'ibm_auckland']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6dec392e",
   "metadata": {},
   "outputs": [],
   "source": [
    "r4_backends = ['ibmq_montreal', 'ibmq_dublin', 'ibmq_toronto', 'ibmq_sydney']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae77072f",
   "metadata": {},
   "source": [
    "## Get the calibration data\n",
    "\n",
    "Here we make a function to get the calibration data and grab the results for our targeted machines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ba3722a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def backends_data(backends):\n",
    "    \"\"\"Return backend calibration data for a list of backends.\n",
    "    \n",
    "    Parameters:\n",
    "        backends (list): A list of backend names.\n",
    "        \n",
    "    Returns:\n",
    "        list: cx gate errors\n",
    "        list: cx gate times\n",
    "        list: meas errors\n",
    "        list: meas times\n",
    "        list: T1 values\n",
    "        list: T2 values\n",
    "    \"\"\"\n",
    "    cx_gate_errors = []\n",
    "    cx_gate_times = []\n",
    "    meas_errors = []\n",
    "    meas_times = []\n",
    "    t1s = []\n",
    "    t2s = []\n",
    "\n",
    "    for back in backends:\n",
    "        backend = provider.get_backend(back)\n",
    "        props = backend.properties()\n",
    "        for gate in props.gates:\n",
    "            if 'cx' in gate.name:\n",
    "                if gate.parameters[0].value != 1.0:\n",
    "                    cx_gate_errors.append(gate.parameters[0].value)\n",
    "                cx_gate_times.append(gate.parameters[1].value)\n",
    "\n",
    "        for qubit in props.qubits:\n",
    "            for item in qubit:\n",
    "                if item.name == 'readout_error':\n",
    "                    meas_errors.append(item.value)\n",
    "                elif item.name == 'readout_length':\n",
    "                    meas_times.append(item.value)\n",
    "                elif item.name == 'T1':\n",
    "                    t1s.append(item.value)\n",
    "                elif item.name == 'T2':\n",
    "                    t2s.append(item.value)\n",
    "                    \n",
    "    return cx_gate_errors, cx_gate_times, meas_errors, meas_times, t1s, t2s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "61c2ba41",
   "metadata": {},
   "outputs": [],
   "source": [
    "r5_data = backends_data(r5_backends)\n",
    "r4_data = backends_data(r4_backends)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3760388a",
   "metadata": {},
   "source": [
    "## Plot results\n",
    "\n",
    "Here we compute the improvement of R5 over R4, if any, and plot it in a bar plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4ed2780f",
   "metadata": {},
   "outputs": [],
   "source": [
    "improve = [np.median(r4_data[kk])/np.median(r5_data[kk]) for kk in range(4)]\n",
    "improve.extend([np.median(r5_data[-2])/np.median(r4_data[-2]),\n",
    "                np.median(r5_data[-1])/np.median(r4_data[-1])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "70a199d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "names = ['cx_error', 'cx_speed', 'meas_error', 'meas_speed',\n",
    "         '$\\mathrm{T}_{1}$', '$\\mathrm{T}_{2}$']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7f6111d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "bars = ax.barh(names, improve)\n",
    "ax.axvline(1, color='0.3', linestyle='dashed', lw=2)\n",
    "ax.set_title('Falcon R5 characteristics verses R4')\n",
    "ax.set_xlabel('Improvement')\n",
    "ax.set_xlim([0, 8])\n",
    "for bar in bars:\n",
    "    width = bar.get_width()\n",
    "    plt.text(bar.get_width()+0.3, bar.get_y()+0.5*bar.get_height(),\n",
    "             '%sx' % np.round(width, 1),\n",
    "             ha='center', va='center',fontsize=12, weight=\"semibold\", color='0.3')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "302fa0f1",
   "metadata": {},
   "source": [
    "Ok cool, we do indeed see a roughly 7x improvment in the median measurement time, as well as an over 2x reduction in the associated measurement error.  Not only that, there is a modest improvement in the CNOT gate speed and error rates as well, with a bit better $T_{1}$ to round out the gains. How was this accomplished?  Well the measurement gains come from a combination of increased measurement cavity linewidth ($\\kappa$) due to stronger coupling, as well an increased in the dispersive shift ($\\chi$) that aids in visibility.  The improvements in the CNOT gates comes from further refinements in how the gates are performed. \n",
    "\n",
    "This reduction in measurement time, and error, is critical for implimenting dynamic circuits with qubit reset, mid-circuit measurements, and eventually conditional logic.  Ideally, measurement should not take any longer than any gate, and we can look to see how the R5 measurement times compare to the CNOT gate times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3dd10631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median R5 CNOT gate time:   348.4444444444444\n",
      "Median R5 measurement time: 732.4444444444445\n"
     ]
    }
   ],
   "source": [
    "print('Median R5 CNOT gate time:  ', np.median(r5_data[1]))\n",
    "print('Median R5 measurement time:', np.median(r5_data[3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e564ca96",
   "metadata": {},
   "source": [
    "We see that a measurement takes about twice as long as a CNOT gate on the R5 systems.  Thus, the R5 systens achieve the goal of high-fidelity readout on a timescale no longe than the typical gate times on the system.  What about the old R4  systems?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d9ded431",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median R4 CNOT gate time:   419.55555555555554\n",
      "Median R4 measurement time: 5276.444444444443\n"
     ]
    }
   ],
   "source": [
    "print('Median R4 CNOT gate time:  ', np.median(r4_data[1]))\n",
    "print('Median R4 measurement time:', np.median(r4_data[3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfc8f153",
   "metadata": {},
   "source": [
    "Ouch!  Each CNOT gate on an R4 system is roughly 13 CNOT gates in terms of time.  Not a good situation to be in when you need to measure and reset a qubit mid-circuit.  Indeed, trying to do so on the R4 systems quickly leads to headaches.  For example, you can try to play with the [dynamic Bernstein-Vazirani example](https://nonhermitian.org/posts/2021/2021-10-27-dynamic_BV.html) using an R5 (as done there) and comparing it to an R4 system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff2a0907",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
