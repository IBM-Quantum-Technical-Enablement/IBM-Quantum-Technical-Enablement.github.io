{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6137a092",
   "metadata": {},
   "source": [
    "# [BETA] Readout error mitigation in Runtime\n",
    "\n",
    "```{post} 2022-08-22\n",
    ":category: Runtime\n",
    ":tags: runtime, mitigation, beta\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3360857e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "This notebook is based on beta software an therefore should not be considered stable.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35a6227d",
   "metadata": {},
   "source": [
    "One of the primary goals,if not THE primary goal, of the Runtime is abstraction.  Namely, users should not have to know detailed hardware knowledge and platform specific techniques for achieving good results.  Otherwise, it is difficult to make progress moving up the software stack into algorithms and applications.\n",
    "\n",
    "One of the first examples of this is the introduction of automated readout error mitigation into the `sampler` and `estimator` Runtime primitives.  On superconducting platforms, readout error is ~2%, and is something that is readily correctable using recent mitigation methods.  The primitives use two different methods for readout mitigation:\n",
    "\n",
    "- **Sampler**: Matrix-free Measurement Mitigation (M3) [[Github](https://github.com/Qiskit-Partners/mthree)] [[PRX Quantum](https://doi.org/10.1103/PRXQuantum.2.040326)]\n",
    "\n",
    "\n",
    "- **estimator**: Model-free readout-error mitigation for quantum expectation values (TREX) [[arXiv]( \t\n",
    "https://doi.org/10.48550/arXiv.2012.09738)] [[PRA](https://doi.org/10.1103/PhysRevA.105.032620)]\n",
    "\n",
    "Here we will explore the usage of these two methods and show that they do indeed correct readout errors at the cost of increased uncertainty in the estimated values for expectation values.  In order to do so, we will need to have M3 installed locally."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "834b12f1",
   "metadata": {},
   "source": [
    "## Frontmatter\n",
    "\n",
    "Here we import what we need, import Runtime, and select a target system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb78639a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:06.664327Z",
     "start_time": "2022-08-22T12:11:04.422985Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from qiskit import *\n",
    "from qiskit.quantum_info import Pauli\n",
    "from qiskit_ibm_runtime import QiskitRuntimeService\n",
    "\n",
    "import mthree\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('ibmq-dark')\n",
    "%config InlineBackend.figure_format='retina'\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71240bed",
   "metadata": {},
   "source": [
    "Here we load the IBM Runtime service.  If you do not pass any arguments, and have not [setup Runtime credentials](https://github.com/Qiskit/qiskit-ibm-runtime#qiskit-runtime-on-ibm-quantum), then it will [by default](https://github.com/Qiskit/qiskit-ibm-runtime/issues/301) look for your IBM Quantum credentials and load them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d0a66659-e61c-4933-8d10-5d7bd18a59a1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:22.392099Z",
     "start_time": "2022-08-22T12:11:06.667093Z"
    }
   },
   "outputs": [],
   "source": [
    "service = QiskitRuntimeService()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df166a5",
   "metadata": {},
   "source": [
    "Next we grab the target backend from the `service` instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5b2d596f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:22.397587Z",
     "start_time": "2022-08-22T12:11:22.394368Z"
    }
   },
   "outputs": [],
   "source": [
    "backend = service.backend('ibm_peekskill')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f99039a1",
   "metadata": {},
   "source": [
    "## Circuit construction and transpilation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31ac7327",
   "metadata": {},
   "source": [
    "The circuit we are going to use is the \"Hadamard ladder\".  It does nothing in particular, and I came up with it as an example of a circuit with a very interesting distribution pattern; not to discrete, but not overly broad.  Because of this, it is a very good circuit for validating readout mitigation methods.  It has caught bugs in past methods, e.g. [this one](https://github.com/Qiskit/qiskit-ignis/blob/24e1dbf4740607a96a43e7893d9effa56d832568/qiskit/ignis/mitigation/expval/ctmp_mitigator.py#L34)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be2835c8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:22.407844Z",
     "start_time": "2022-08-22T12:11:22.402155Z"
    }
   },
   "outputs": [],
   "source": [
    "# Build circuit here\n",
    "N = 12\n",
    "qc = QuantumCircuit(N)\n",
    "\n",
    "qc.x(range(N))\n",
    "qc.h(range(N))\n",
    "\n",
    "for kk in range(N // 2, 0, -1):\n",
    "    qc.ch(kk, kk - 1)\n",
    "for kk in range(N // 2, N - 1):\n",
    "    qc.ch(kk, kk + 1)\n",
    "#qc.measure_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96a57f8c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:23.117179Z",
     "start_time": "2022-08-22T12:11:22.411798Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 581.178x746.48 with 1 Axes>"
      ]
     },
     "execution_count": 5,
     "metadata": {
      "image/png": {
       "height": 619,
       "width": 485
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f0535ed",
   "metadata": {},
   "source": [
    "Notice that I commented out the `measure_all` line.  This is because the `estimator` primitive requires circuits with no measurements at the end, where as the `sampler` does."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f747e5",
   "metadata": {},
   "source": [
    "Before using the `sampler` I am first going to transpile the circuit.  While the `sampler` could do this for me, I cannot take advantage of that here.  The reason is because I want to see what the raw, uncorrected results look like before mitigating them.  In order to mitigate the exact same set of values, I will need to mitigate locally using the M3 method.  Doing so requires knowing the qubit mapping, which is obtained from the transpiled circuit(s).\n",
    "\n",
    "Here I do the transpilation in online, adding the measurements **to a copy of the original circuit**.  This is why you see the `inplace=False` code.  We also use `optimization_level=3` that will find a good subset of qubits to use via `mapomatic`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ea6a6a35",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:26.826609Z",
     "start_time": "2022-08-22T12:11:23.119862Z"
    }
   },
   "outputs": [],
   "source": [
    "trans_qc = transpile(qc.measure_all(inplace=False), backend, optimization_level=3, approximation_degree=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9617338b",
   "metadata": {},
   "source": [
    "## Running the primitives\n",
    "\n",
    "Now we are in a position to run the primitives.  Here I do so directly via `service.run()` because I want to async run two jobs before waiting on the results.  [This is not possible via the Qiskit interfaces](https://github.com/Qiskit/qiskit-ibm-runtime/issues/334).  \n",
    "\n",
    "Turning on error mitigation and suppression (e.g. dynamical decoupling) techniques is done via the `resilience_settings`.  This goes into the `program_inputs` for the primitives.  There is a philosophical question as to what is and is not a \"error suppression\" technique, e.g. is gate optimization error suppression?, that I leave for another time.  At present, setting `level=0` (default) in the `resilience_settings` turns off any addition mitigation / suppression, where as `level=1` will turn on readout mitigation.  In the future it will do more than just that.\n",
    "\n",
    "\n",
    "### Sampler\n",
    "\n",
    "Here I start with the `sampler`.  I am passing only a single copy of the transpiled circuit, `trans_qc`, and using `circuit_indices` to tell it to run the same circuit 50 times.  I am also setting 10k shots, turning off any online mitigation using `resilience_settings`, `level=0`, and skipping transpilation because I did so already."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "283ac2b6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:31.946670Z",
     "start_time": "2022-08-22T12:11:26.829250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "job id: cc1n4solvap7pf9akabg\n"
     ]
    }
   ],
   "source": [
    "# Specify the backend name.\n",
    "options = {\"backend_name\": backend.name}\n",
    "\n",
    "program_inputs = {\"circuits\": trans_qc,\n",
    "                  \"circuit_indices\": [0]*50,\n",
    "                  \"run_options\":{\"shots\": 10000},\n",
    "                  \"resilience_settings\":{\"level\": 0},\n",
    "                  \"skip_transpilation\": True}\n",
    "\n",
    "job = service.run(program_id=\"sampler\",\n",
    "                  options=options,\n",
    "                  inputs=program_inputs)\n",
    "\n",
    "# Printing the job ID in case we run into problems\n",
    "print(f\"job id: {job.job_id}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64351ec1",
   "metadata": {},
   "source": [
    "### Estimator\n",
    "\n",
    "Now we turn to computing expectation values directly.  Here we are interested in the expectation value of $Z^{\\otimes N}$, so we first need to construct this observable:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8c74910c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:31.954051Z",
     "start_time": "2022-08-22T12:11:31.950159Z"
    }
   },
   "outputs": [],
   "source": [
    "observable = Pauli('Z'*N)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cce7888a",
   "metadata": {},
   "source": [
    "Now we can call the `estimator` primitive, again executing the same circuit 50 times via `circuit_indices` and computing the same observable 50 times using `observable_indices`.  Unlike the `sampler` above, we turn the `resilience_settings` level to `level=1` to turn on the TREX readout error mitigation, and tell the primitive to transpile the circuit for us.  Getting the estimator to work with locally transpiled circuits is [quite a challenge](https://github.com/Qiskit/qiskit-ibm-runtime/issues/338)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "99c3203e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:33.118939Z",
     "start_time": "2022-08-22T12:11:31.958565Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "job id: cc1n4t76q7nnhokar86g\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Specify the backend name.\n",
    "options = {\"backend_name\": backend.name}\n",
    "\n",
    "program_inputs = {\n",
    "    \"circuits\": [qc]*50,\n",
    "    \"observables\":[observable],\n",
    "    \"circuit_indices\": list(range(50)),\n",
    "    \"observable_indices\": [0]*50,\n",
    "    \"run_options\":{\"shots\": 10000},\n",
    "    \"resilience_settings\":{\"level\": 1},\n",
    "    \"skip_transpilation\": False,\n",
    "    \"transpilation_settings\": {\"optimization_level\": 3}\n",
    "}\n",
    "\n",
    "job2 = service.run(\n",
    "    program_id=\"estimator\",\n",
    "    options=options,\n",
    "    inputs=program_inputs,\n",
    ")\n",
    "\n",
    "# Printing the job ID in case we need to retrieve it later.\n",
    "print(f\"job id: {job2.job_id}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48d206b8",
   "metadata": {},
   "source": [
    "## Local M3 mitigation\n",
    "\n",
    "In order to see what the raw expectation values look like we had to turn off the primitive mitigation in the sampler.  So be must do the correct locally with M3.  Thus we need to calibrate a mitigation object and apply the correction.  Currently, a backend from the Runtime does not allow us to call `backend.run()`.  As such, we need to get a second backend from the `qiskit_ibmq_provider`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06ea8ea5-e015-476f-88d2-9a0f9384bfe8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:48.573419Z",
     "start_time": "2022-08-22T12:11:33.124677Z"
    }
   },
   "outputs": [],
   "source": [
    "IBMQ.load_account();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3bc4e2ac-9a7b-4c82-83d4-9040b4358d04",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:48.578816Z",
     "start_time": "2022-08-22T12:11:48.575711Z"
    }
   },
   "outputs": [],
   "source": [
    "provider = IBMQ.get_provider(project='internal-test')\n",
    "backend2 = provider.get_backend(backend.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a3fd134",
   "metadata": {},
   "source": [
    "We need to construct a mitigation instance targeting our backend, and calibrate it.  However we will also need to know which physical qubits are used in the measurements so we can apply the correct mitigation.  This is done by computing the mapping:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0494f76-ae76-453d-8308-d063a686b0b4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:48.587292Z",
     "start_time": "2022-08-22T12:11:48.581941Z"
    }
   },
   "outputs": [],
   "source": [
    "mapping = mthree.utils.final_measurement_mapping(trans_qc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c853ecc",
   "metadata": {},
   "source": [
    "Now we can build and calibrate.  Here I calibrate with 25,000 shots since that is the number used in the `sampler`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "92fef1a6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:11:48.593710Z",
     "start_time": "2022-08-22T12:11:48.589672Z"
    }
   },
   "outputs": [],
   "source": [
    "mit = mthree.M3Mitigation(backend2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "460eb30c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:31:39.753082Z",
     "start_time": "2022-08-22T12:11:48.595943Z"
    }
   },
   "outputs": [],
   "source": [
    "mit.cals_from_system(mapping, shots=25000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b9d33b",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "We now are in a position (assuming all of our jobs are done) to process the results.  First we grab the raw data from the `sampler` job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83adfe9b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:31:57.274553Z",
     "start_time": "2022-08-22T12:31:39.755813Z"
    }
   },
   "outputs": [],
   "source": [
    "raw_result = job.result()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66273dec",
   "metadata": {},
   "source": [
    "Because we are calling the primitives directly via `service.run()` the result is a plain dictionary.  For the `sampler` the resulting probability distributions are contained in the key `quasi_dists`.  This is short for quasi-distribution, which is a probability distribution with negative values, but still sums to one.  Because we did not mitigation, the returned values are just regular probability distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "63b15065-aca1-4cad-91d4-fb4d7cdfd911",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:31:57.279763Z",
     "start_time": "2022-08-22T12:31:57.276655Z"
    }
   },
   "outputs": [],
   "source": [
    "probs = raw_result['quasi_dists']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad5604fc",
   "metadata": {},
   "source": [
    "Now, to compute expectation values, we must turn to M3 because [there is no built in expectation value routine in Qiskit for distributions](https://github.com/Qiskit/qiskit-terra/issues/8465).  We compute the expectation values for the raw data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "306a843e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:31:57.294245Z",
     "start_time": "2022-08-22T12:31:57.282437Z"
    }
   },
   "outputs": [],
   "source": [
    "raw_expval = [mthree.utils.expval(dist) for dist in probs]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d45f834",
   "metadata": {},
   "source": [
    "Next, we apply the correction using M3, and compute the expectation values using these corrected quasi-distributions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a267ffc-26ba-4496-9e93-bb9612b812f3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:31:57.600277Z",
     "start_time": "2022-08-22T12:31:57.296393Z"
    }
   },
   "outputs": [],
   "source": [
    "quasi = mit.apply_correction(probs, [mapping]*len(probs))\n",
    "m3_expval = quasi.expval()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2b401c7",
   "metadata": {},
   "source": [
    "Finally, we get the precomputed expectation values computed via the `estimator`.  These are under the `values` dictionary key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ac0c4aa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:32:14.501039Z",
     "start_time": "2022-08-22T12:31:57.603210Z"
    }
   },
   "outputs": [],
   "source": [
    "trex_expval = job2.result()['values']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfdc4f37",
   "metadata": {},
   "source": [
    "We are finally in a position to plot all of our results together and see what we got:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "22d016fd-6c2a-4fb2-9af9-a66a6e641131",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:42:34.571587Z",
     "start_time": "2022-08-22T12:42:34.423263Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 385,
       "width": 556
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.violinplot(data=[raw_expval, m3_expval, trex_expval])\n",
    "ax.set_xticklabels(['Raw', 'M3', 'TREX'], fontsize=14);\n",
    "ax.set_ylabel('Expectation value')\n",
    "# This is the ideal value of the expectation value\n",
    "ax.axhline(0.446, linestyle='dashed', lw=2)\n",
    "ax.set_ylim([0, 0.5]);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a40ab9e",
   "metadata": {},
   "source": [
    "We see that both methods do indeed provide a fair bit of mitigation, yielding expectation values that are much closer to the true answer (dashed line).  It should also be noted that the output distributions are wider than that of the raw data. This is a visual representation of the additional overhead that mitigation necessarily introduces;  There is additional uncertainty added to the result that requires an increase in the number of shots taken to reduce the precision back to the unmitigated amount."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5d772c39",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-08-22T12:50:18.030479Z",
     "start_time": "2022-08-22T12:50:18.025785Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td><code>qiskit-terra</code></td><td>0.21.1</td></tr><tr><td><code>qiskit-aer</code></td><td>0.10.4</td></tr><tr><td><code>qiskit-ignis</code></td><td>0.7.1</td></tr><tr><td><code>qiskit-ibmq-provider</code></td><td>0.19.2</td></tr><tr><td><code>qiskit</code></td><td>0.37.0</td></tr><tr><td><code>qiskit-nature</code></td><td>0.4.3</td></tr><tr><td><code>qiskit-machine-learning</code></td><td>0.4.0</td></tr><tr><th>System information</th></tr><tr><td>Python version</td><td>3.10.5</td></tr><tr><td>Python compiler</td><td>Clang 13.0.1 </td></tr><tr><td>Python build</td><td>main, Jun 14 2022 07:03:09</td></tr><tr><td>OS</td><td>Darwin</td></tr><tr><td>CPUs</td><td>4</td></tr><tr><td>Memory (Gb)</td><td>16.0</td></tr><tr><td colspan='2'>Mon Aug 22 08:50:18 2022 EDT</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import qiskit.tools.jupyter\n",
    "%qiskit_version_table"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
